/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "./common";

export declare namespace ITorqueDriftStructs {
  export type LockInfoStruct = {
    amount: BigNumberish;
    unlockTime: BigNumberish;
    boostPercent: BigNumberish;
  };

  export type LockInfoStructOutput = [
    amount: bigint,
    unlockTime: bigint,
    boostPercent: bigint
  ] & { amount: bigint; unlockTime: bigint; boostPercent: bigint };
}

export interface TorqueDriftReferralInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "MIN_CLAIM_COOLDOWN"
      | "REFERRAL_BOOST_DURATION"
      | "SECONDS_PER_DAY"
      | "SECONDS_PER_HOUR"
      | "UPGRADE_INTERFACE_VERSION"
      | "carsContract"
      | "createReferralCode"
      | "discountReferralCodes"
      | "emergencyWithdraw"
      | "equippedCars"
      | "gameContract"
      | "getContractBalance"
      | "getDiscountReferralCodesStatus"
      | "getReferralDiscountInfo"
      | "getReferralInfo"
      | "getUserReferralCode"
      | "globalState"
      | "initialize"
      | "initializeStartGameWithReferral"
      | "isValidReferralCode"
      | "owner"
      | "proxiableUUID"
      | "referralCodeToAddress"
      | "referralCounts"
      | "referralDiscountBalance"
      | "referrals"
      | "renounceOwnership"
      | "setDiscountReferralCodes"
      | "setGameContract"
      | "specialReferralCount"
      | "testFunction"
      | "tokenContract"
      | "transferOwnership"
      | "treasuryWallet"
      | "upgradeToAndCall"
      | "userStates"
      | "withdrawReferralDiscounts"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "DebugInitialize"
      | "DebugPayment"
      | "DiscountReferralApplied"
      | "DiscountReferralCodeUpdated"
      | "GameStarted"
      | "Initialized"
      | "OwnershipTransferred"
      | "ReferralApplied"
      | "ReferralCodeCreated"
      | "ReferralDiscountWithdrawn"
      | "Upgraded"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "MIN_CLAIM_COOLDOWN",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "REFERRAL_BOOST_DURATION",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "SECONDS_PER_DAY",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "SECONDS_PER_HOUR",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "UPGRADE_INTERFACE_VERSION",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "carsContract",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "createReferralCode",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "discountReferralCodes",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "emergencyWithdraw",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "equippedCars",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "gameContract",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getContractBalance",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getDiscountReferralCodesStatus",
    values: [string[]]
  ): string;
  encodeFunctionData(
    functionFragment: "getReferralDiscountInfo",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getReferralInfo",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getUserReferralCode",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "globalState",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [AddressLike, AddressLike, AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "initializeStartGameWithReferral",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "isValidReferralCode",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "proxiableUUID",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "referralCodeToAddress",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "referralCounts",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "referralDiscountBalance",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "referrals",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setDiscountReferralCodes",
    values: [string[], boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setGameContract",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "specialReferralCount",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "testFunction",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "tokenContract",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "treasuryWallet",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "upgradeToAndCall",
    values: [AddressLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "userStates",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawReferralDiscounts",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "MIN_CLAIM_COOLDOWN",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "REFERRAL_BOOST_DURATION",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "SECONDS_PER_DAY",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "SECONDS_PER_HOUR",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "UPGRADE_INTERFACE_VERSION",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "carsContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createReferralCode",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "discountReferralCodes",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "emergencyWithdraw",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "equippedCars",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "gameContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getContractBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getDiscountReferralCodesStatus",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getReferralDiscountInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getReferralInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUserReferralCode",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "globalState",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "initializeStartGameWithReferral",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isValidReferralCode",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "proxiableUUID",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "referralCodeToAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "referralCounts",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "referralDiscountBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "referrals", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setDiscountReferralCodes",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setGameContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "specialReferralCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "testFunction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tokenContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "treasuryWallet",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "upgradeToAndCall",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "userStates", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "withdrawReferralDiscounts",
    data: BytesLike
  ): Result;
}

export namespace DebugInitializeEvent {
  export type InputTuple = [
    msgSender: AddressLike,
    txOrigin: AddressLike,
    gameContract: AddressLike,
    thisContract: AddressLike
  ];
  export type OutputTuple = [
    msgSender: string,
    txOrigin: string,
    gameContract: string,
    thisContract: string
  ];
  export interface OutputObject {
    msgSender: string;
    txOrigin: string;
    gameContract: string;
    thisContract: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace DebugPaymentEvent {
  export type InputTuple = [
    msgSender: AddressLike,
    msgValue: BigNumberish,
    referrerCode: string,
    treasuryWallet: AddressLike
  ];
  export type OutputTuple = [
    msgSender: string,
    msgValue: bigint,
    referrerCode: string,
    treasuryWallet: string
  ];
  export interface OutputObject {
    msgSender: string;
    msgValue: bigint;
    referrerCode: string;
    treasuryWallet: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace DiscountReferralAppliedEvent {
  export type InputTuple = [
    referrer: AddressLike,
    referee: AddressLike,
    discountAmount: BigNumberish,
    timestamp: BigNumberish
  ];
  export type OutputTuple = [
    referrer: string,
    referee: string,
    discountAmount: bigint,
    timestamp: bigint
  ];
  export interface OutputObject {
    referrer: string;
    referee: string;
    discountAmount: bigint;
    timestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace DiscountReferralCodeUpdatedEvent {
  export type InputTuple = [
    code: string,
    referrer: AddressLike,
    enabled: boolean,
    timestamp: BigNumberish
  ];
  export type OutputTuple = [
    code: string,
    referrer: string,
    enabled: boolean,
    timestamp: bigint
  ];
  export interface OutputObject {
    code: string;
    referrer: string;
    enabled: boolean;
    timestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace GameStartedEvent {
  export type InputTuple = [
    user: AddressLike,
    amount: BigNumberish,
    starterCar: AddressLike,
    timestamp: BigNumberish
  ];
  export type OutputTuple = [
    user: string,
    amount: bigint,
    starterCar: string,
    timestamp: bigint
  ];
  export interface OutputObject {
    user: string;
    amount: bigint;
    starterCar: string;
    timestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace InitializedEvent {
  export type InputTuple = [version: BigNumberish];
  export type OutputTuple = [version: bigint];
  export interface OutputObject {
    version: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ReferralAppliedEvent {
  export type InputTuple = [
    referrer: AddressLike,
    referee: AddressLike,
    referrerReward: BigNumberish,
    refereeDiscount: BigNumberish,
    boostDuration: BigNumberish,
    timestamp: BigNumberish
  ];
  export type OutputTuple = [
    referrer: string,
    referee: string,
    referrerReward: bigint,
    refereeDiscount: bigint,
    boostDuration: bigint,
    timestamp: bigint
  ];
  export interface OutputObject {
    referrer: string;
    referee: string;
    referrerReward: bigint;
    refereeDiscount: bigint;
    boostDuration: bigint;
    timestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ReferralCodeCreatedEvent {
  export type InputTuple = [
    user: AddressLike,
    code: BytesLike,
    timestamp: BigNumberish
  ];
  export type OutputTuple = [user: string, code: string, timestamp: bigint];
  export interface OutputObject {
    user: string;
    code: string;
    timestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ReferralDiscountWithdrawnEvent {
  export type InputTuple = [
    referrer: AddressLike,
    amount: BigNumberish,
    specialReferralCount: BigNumberish,
    timestamp: BigNumberish
  ];
  export type OutputTuple = [
    referrer: string,
    amount: bigint,
    specialReferralCount: bigint,
    timestamp: bigint
  ];
  export interface OutputObject {
    referrer: string;
    amount: bigint;
    specialReferralCount: bigint;
    timestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UpgradedEvent {
  export type InputTuple = [implementation: AddressLike];
  export type OutputTuple = [implementation: string];
  export interface OutputObject {
    implementation: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface TorqueDriftReferral extends BaseContract {
  connect(runner?: ContractRunner | null): TorqueDriftReferral;
  waitForDeployment(): Promise<this>;

  interface: TorqueDriftReferralInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  MIN_CLAIM_COOLDOWN: TypedContractMethod<[], [bigint], "view">;

  REFERRAL_BOOST_DURATION: TypedContractMethod<[], [bigint], "view">;

  SECONDS_PER_DAY: TypedContractMethod<[], [bigint], "view">;

  SECONDS_PER_HOUR: TypedContractMethod<[], [bigint], "view">;

  UPGRADE_INTERFACE_VERSION: TypedContractMethod<[], [string], "view">;

  carsContract: TypedContractMethod<[], [string], "view">;

  createReferralCode: TypedContractMethod<[code: string], [void], "nonpayable">;

  discountReferralCodes: TypedContractMethod<[arg0: string], [boolean], "view">;

  emergencyWithdraw: TypedContractMethod<
    [amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  equippedCars: TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [
      [
        string,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint
      ] & {
        mint: string;
        hashPower: bigint;
        efficiency: bigint;
        lastMaintenance: bigint;
        lastFarmingTime: bigint;
        accumulatedReward: bigint;
        rarity: bigint;
        version: bigint;
        slotIndex: bigint;
      }
    ],
    "view"
  >;

  gameContract: TypedContractMethod<[], [string], "view">;

  getContractBalance: TypedContractMethod<[], [bigint], "view">;

  getDiscountReferralCodesStatus: TypedContractMethod<
    [codes: string[]],
    [boolean[]],
    "view"
  >;

  getReferralDiscountInfo: TypedContractMethod<
    [user: AddressLike],
    [
      [bigint, bigint, boolean, bigint] & {
        balance: bigint;
        specialCount: bigint;
        canWithdraw: boolean;
        totalDiscountEarned: bigint;
      }
    ],
    "view"
  >;

  getReferralInfo: TypedContractMethod<
    [user: AddressLike],
    [
      [string, bigint, bigint, bigint, bigint, bigint, bigint, bigint] & {
        referrer_: string;
        referralEarnings_: bigint;
        referralEarningsLevel2_: bigint;
        referralCount_: bigint;
        discount_: bigint;
        boostPercent_: bigint;
        boostStartTime_: bigint;
        boostDuration_: bigint;
      }
    ],
    "view"
  >;

  getUserReferralCode: TypedContractMethod<
    [user: AddressLike],
    [string],
    "view"
  >;

  globalState: TypedContractMethod<
    [],
    [
      [
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        string,
        string,
        string,
        string,
        boolean,
        boolean,
        boolean,
        boolean,
        boolean
      ] & {
        totalMinted: bigint;
        maxSupply: bigint;
        baseRate: bigint;
        lastHalving: bigint;
        halvingCount: bigint;
        nextHalvingThreshold: bigint;
        emergencyTimestamp: bigint;
        pendingBaseRate: bigint;
        pendingMaxSupply: bigint;
        timelockExpires: bigint;
        timelockDuration: bigint;
        upgradeProposedAt: bigint;
        totalUsers: bigint;
        totalHashPower: bigint;
        totalTokensClaimed: bigint;
        lastStatsUpdate: bigint;
        admin: string;
        tokenMint: string;
        pendingAdmin: string;
        emergencyReason: string;
        mintingPaused: boolean;
        emergencyPause: boolean;
        claimPaused: boolean;
        equipPaused: boolean;
        lockPaused: boolean;
      }
    ],
    "view"
  >;

  initialize: TypedContractMethod<
    [
      _tokenContract: AddressLike,
      _carsContract: AddressLike,
      _treasuryWallet: AddressLike,
      _gameContract: AddressLike
    ],
    [void],
    "nonpayable"
  >;

  initializeStartGameWithReferral: TypedContractMethod<
    [referrerCode: string],
    [void],
    "payable"
  >;

  isValidReferralCode: TypedContractMethod<[code: string], [boolean], "view">;

  owner: TypedContractMethod<[], [string], "view">;

  proxiableUUID: TypedContractMethod<[], [string], "view">;

  referralCodeToAddress: TypedContractMethod<[arg0: string], [string], "view">;

  referralCounts: TypedContractMethod<[arg0: AddressLike], [bigint], "view">;

  referralDiscountBalance: TypedContractMethod<
    [arg0: AddressLike],
    [bigint],
    "view"
  >;

  referrals: TypedContractMethod<[arg0: AddressLike], [string], "view">;

  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  setDiscountReferralCodes: TypedContractMethod<
    [codes: string[], enabled: boolean],
    [void],
    "nonpayable"
  >;

  setGameContract: TypedContractMethod<
    [_gameContract: AddressLike],
    [void],
    "nonpayable"
  >;

  specialReferralCount: TypedContractMethod<
    [arg0: AddressLike],
    [bigint],
    "view"
  >;

  testFunction: TypedContractMethod<[], [boolean], "payable">;

  tokenContract: TypedContractMethod<[], [string], "view">;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  treasuryWallet: TypedContractMethod<[], [string], "view">;

  upgradeToAndCall: TypedContractMethod<
    [newImplementation: AddressLike, data: BytesLike],
    [void],
    "payable"
  >;

  userStates: TypedContractMethod<
    [arg0: AddressLike],
    [
      [
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        ITorqueDriftStructs.LockInfoStructOutput,
        string,
        string,
        bigint,
        boolean
      ] & {
        lastClaim: bigint;
        totalHashPower: bigint;
        discount: bigint;
        boostPercent: bigint;
        boostStartTime: bigint;
        boostDuration: bigint;
        lastLockTime: bigint;
        lastCarCreationDay: bigint;
        dailyCarCreationCount: bigint;
        totalClaimed: bigint;
        referralEarnings: bigint;
        referralEarningsLevel2: bigint;
        lock: ITorqueDriftStructs.LockInfoStructOutput;
        referrer: string;
        referrerLevel2: string;
        referralCount: bigint;
        gameStarted: boolean;
      }
    ],
    "view"
  >;

  withdrawReferralDiscounts: TypedContractMethod<[], [void], "nonpayable">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "MIN_CLAIM_COOLDOWN"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "REFERRAL_BOOST_DURATION"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "SECONDS_PER_DAY"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "SECONDS_PER_HOUR"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "UPGRADE_INTERFACE_VERSION"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "carsContract"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "createReferralCode"
  ): TypedContractMethod<[code: string], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "discountReferralCodes"
  ): TypedContractMethod<[arg0: string], [boolean], "view">;
  getFunction(
    nameOrSignature: "emergencyWithdraw"
  ): TypedContractMethod<[amount: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "equippedCars"
  ): TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [
      [
        string,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint
      ] & {
        mint: string;
        hashPower: bigint;
        efficiency: bigint;
        lastMaintenance: bigint;
        lastFarmingTime: bigint;
        accumulatedReward: bigint;
        rarity: bigint;
        version: bigint;
        slotIndex: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "gameContract"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "getContractBalance"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getDiscountReferralCodesStatus"
  ): TypedContractMethod<[codes: string[]], [boolean[]], "view">;
  getFunction(
    nameOrSignature: "getReferralDiscountInfo"
  ): TypedContractMethod<
    [user: AddressLike],
    [
      [bigint, bigint, boolean, bigint] & {
        balance: bigint;
        specialCount: bigint;
        canWithdraw: boolean;
        totalDiscountEarned: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "getReferralInfo"
  ): TypedContractMethod<
    [user: AddressLike],
    [
      [string, bigint, bigint, bigint, bigint, bigint, bigint, bigint] & {
        referrer_: string;
        referralEarnings_: bigint;
        referralEarningsLevel2_: bigint;
        referralCount_: bigint;
        discount_: bigint;
        boostPercent_: bigint;
        boostStartTime_: bigint;
        boostDuration_: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "getUserReferralCode"
  ): TypedContractMethod<[user: AddressLike], [string], "view">;
  getFunction(
    nameOrSignature: "globalState"
  ): TypedContractMethod<
    [],
    [
      [
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        string,
        string,
        string,
        string,
        boolean,
        boolean,
        boolean,
        boolean,
        boolean
      ] & {
        totalMinted: bigint;
        maxSupply: bigint;
        baseRate: bigint;
        lastHalving: bigint;
        halvingCount: bigint;
        nextHalvingThreshold: bigint;
        emergencyTimestamp: bigint;
        pendingBaseRate: bigint;
        pendingMaxSupply: bigint;
        timelockExpires: bigint;
        timelockDuration: bigint;
        upgradeProposedAt: bigint;
        totalUsers: bigint;
        totalHashPower: bigint;
        totalTokensClaimed: bigint;
        lastStatsUpdate: bigint;
        admin: string;
        tokenMint: string;
        pendingAdmin: string;
        emergencyReason: string;
        mintingPaused: boolean;
        emergencyPause: boolean;
        claimPaused: boolean;
        equipPaused: boolean;
        lockPaused: boolean;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "initialize"
  ): TypedContractMethod<
    [
      _tokenContract: AddressLike,
      _carsContract: AddressLike,
      _treasuryWallet: AddressLike,
      _gameContract: AddressLike
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "initializeStartGameWithReferral"
  ): TypedContractMethod<[referrerCode: string], [void], "payable">;
  getFunction(
    nameOrSignature: "isValidReferralCode"
  ): TypedContractMethod<[code: string], [boolean], "view">;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "proxiableUUID"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "referralCodeToAddress"
  ): TypedContractMethod<[arg0: string], [string], "view">;
  getFunction(
    nameOrSignature: "referralCounts"
  ): TypedContractMethod<[arg0: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "referralDiscountBalance"
  ): TypedContractMethod<[arg0: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "referrals"
  ): TypedContractMethod<[arg0: AddressLike], [string], "view">;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setDiscountReferralCodes"
  ): TypedContractMethod<
    [codes: string[], enabled: boolean],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setGameContract"
  ): TypedContractMethod<[_gameContract: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "specialReferralCount"
  ): TypedContractMethod<[arg0: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "testFunction"
  ): TypedContractMethod<[], [boolean], "payable">;
  getFunction(
    nameOrSignature: "tokenContract"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "treasuryWallet"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "upgradeToAndCall"
  ): TypedContractMethod<
    [newImplementation: AddressLike, data: BytesLike],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "userStates"
  ): TypedContractMethod<
    [arg0: AddressLike],
    [
      [
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        ITorqueDriftStructs.LockInfoStructOutput,
        string,
        string,
        bigint,
        boolean
      ] & {
        lastClaim: bigint;
        totalHashPower: bigint;
        discount: bigint;
        boostPercent: bigint;
        boostStartTime: bigint;
        boostDuration: bigint;
        lastLockTime: bigint;
        lastCarCreationDay: bigint;
        dailyCarCreationCount: bigint;
        totalClaimed: bigint;
        referralEarnings: bigint;
        referralEarningsLevel2: bigint;
        lock: ITorqueDriftStructs.LockInfoStructOutput;
        referrer: string;
        referrerLevel2: string;
        referralCount: bigint;
        gameStarted: boolean;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "withdrawReferralDiscounts"
  ): TypedContractMethod<[], [void], "nonpayable">;

  getEvent(
    key: "DebugInitialize"
  ): TypedContractEvent<
    DebugInitializeEvent.InputTuple,
    DebugInitializeEvent.OutputTuple,
    DebugInitializeEvent.OutputObject
  >;
  getEvent(
    key: "DebugPayment"
  ): TypedContractEvent<
    DebugPaymentEvent.InputTuple,
    DebugPaymentEvent.OutputTuple,
    DebugPaymentEvent.OutputObject
  >;
  getEvent(
    key: "DiscountReferralApplied"
  ): TypedContractEvent<
    DiscountReferralAppliedEvent.InputTuple,
    DiscountReferralAppliedEvent.OutputTuple,
    DiscountReferralAppliedEvent.OutputObject
  >;
  getEvent(
    key: "DiscountReferralCodeUpdated"
  ): TypedContractEvent<
    DiscountReferralCodeUpdatedEvent.InputTuple,
    DiscountReferralCodeUpdatedEvent.OutputTuple,
    DiscountReferralCodeUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "GameStarted"
  ): TypedContractEvent<
    GameStartedEvent.InputTuple,
    GameStartedEvent.OutputTuple,
    GameStartedEvent.OutputObject
  >;
  getEvent(
    key: "Initialized"
  ): TypedContractEvent<
    InitializedEvent.InputTuple,
    InitializedEvent.OutputTuple,
    InitializedEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;
  getEvent(
    key: "ReferralApplied"
  ): TypedContractEvent<
    ReferralAppliedEvent.InputTuple,
    ReferralAppliedEvent.OutputTuple,
    ReferralAppliedEvent.OutputObject
  >;
  getEvent(
    key: "ReferralCodeCreated"
  ): TypedContractEvent<
    ReferralCodeCreatedEvent.InputTuple,
    ReferralCodeCreatedEvent.OutputTuple,
    ReferralCodeCreatedEvent.OutputObject
  >;
  getEvent(
    key: "ReferralDiscountWithdrawn"
  ): TypedContractEvent<
    ReferralDiscountWithdrawnEvent.InputTuple,
    ReferralDiscountWithdrawnEvent.OutputTuple,
    ReferralDiscountWithdrawnEvent.OutputObject
  >;
  getEvent(
    key: "Upgraded"
  ): TypedContractEvent<
    UpgradedEvent.InputTuple,
    UpgradedEvent.OutputTuple,
    UpgradedEvent.OutputObject
  >;

  filters: {
    "DebugInitialize(address,address,address,address)": TypedContractEvent<
      DebugInitializeEvent.InputTuple,
      DebugInitializeEvent.OutputTuple,
      DebugInitializeEvent.OutputObject
    >;
    DebugInitialize: TypedContractEvent<
      DebugInitializeEvent.InputTuple,
      DebugInitializeEvent.OutputTuple,
      DebugInitializeEvent.OutputObject
    >;

    "DebugPayment(address,uint256,string,address)": TypedContractEvent<
      DebugPaymentEvent.InputTuple,
      DebugPaymentEvent.OutputTuple,
      DebugPaymentEvent.OutputObject
    >;
    DebugPayment: TypedContractEvent<
      DebugPaymentEvent.InputTuple,
      DebugPaymentEvent.OutputTuple,
      DebugPaymentEvent.OutputObject
    >;

    "DiscountReferralApplied(address,address,uint256,uint256)": TypedContractEvent<
      DiscountReferralAppliedEvent.InputTuple,
      DiscountReferralAppliedEvent.OutputTuple,
      DiscountReferralAppliedEvent.OutputObject
    >;
    DiscountReferralApplied: TypedContractEvent<
      DiscountReferralAppliedEvent.InputTuple,
      DiscountReferralAppliedEvent.OutputTuple,
      DiscountReferralAppliedEvent.OutputObject
    >;

    "DiscountReferralCodeUpdated(string,address,bool,uint256)": TypedContractEvent<
      DiscountReferralCodeUpdatedEvent.InputTuple,
      DiscountReferralCodeUpdatedEvent.OutputTuple,
      DiscountReferralCodeUpdatedEvent.OutputObject
    >;
    DiscountReferralCodeUpdated: TypedContractEvent<
      DiscountReferralCodeUpdatedEvent.InputTuple,
      DiscountReferralCodeUpdatedEvent.OutputTuple,
      DiscountReferralCodeUpdatedEvent.OutputObject
    >;

    "GameStarted(address,uint256,address,uint256)": TypedContractEvent<
      GameStartedEvent.InputTuple,
      GameStartedEvent.OutputTuple,
      GameStartedEvent.OutputObject
    >;
    GameStarted: TypedContractEvent<
      GameStartedEvent.InputTuple,
      GameStartedEvent.OutputTuple,
      GameStartedEvent.OutputObject
    >;

    "Initialized(uint64)": TypedContractEvent<
      InitializedEvent.InputTuple,
      InitializedEvent.OutputTuple,
      InitializedEvent.OutputObject
    >;
    Initialized: TypedContractEvent<
      InitializedEvent.InputTuple,
      InitializedEvent.OutputTuple,
      InitializedEvent.OutputObject
    >;

    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;

    "ReferralApplied(address,address,uint256,uint256,uint256,uint256)": TypedContractEvent<
      ReferralAppliedEvent.InputTuple,
      ReferralAppliedEvent.OutputTuple,
      ReferralAppliedEvent.OutputObject
    >;
    ReferralApplied: TypedContractEvent<
      ReferralAppliedEvent.InputTuple,
      ReferralAppliedEvent.OutputTuple,
      ReferralAppliedEvent.OutputObject
    >;

    "ReferralCodeCreated(address,bytes32,uint256)": TypedContractEvent<
      ReferralCodeCreatedEvent.InputTuple,
      ReferralCodeCreatedEvent.OutputTuple,
      ReferralCodeCreatedEvent.OutputObject
    >;
    ReferralCodeCreated: TypedContractEvent<
      ReferralCodeCreatedEvent.InputTuple,
      ReferralCodeCreatedEvent.OutputTuple,
      ReferralCodeCreatedEvent.OutputObject
    >;

    "ReferralDiscountWithdrawn(address,uint256,uint32,uint256)": TypedContractEvent<
      ReferralDiscountWithdrawnEvent.InputTuple,
      ReferralDiscountWithdrawnEvent.OutputTuple,
      ReferralDiscountWithdrawnEvent.OutputObject
    >;
    ReferralDiscountWithdrawn: TypedContractEvent<
      ReferralDiscountWithdrawnEvent.InputTuple,
      ReferralDiscountWithdrawnEvent.OutputTuple,
      ReferralDiscountWithdrawnEvent.OutputObject
    >;

    "Upgraded(address)": TypedContractEvent<
      UpgradedEvent.InputTuple,
      UpgradedEvent.OutputTuple,
      UpgradedEvent.OutputObject
    >;
    Upgraded: TypedContractEvent<
      UpgradedEvent.InputTuple,
      UpgradedEvent.OutputTuple,
      UpgradedEvent.OutputObject
    >;
  };
}
