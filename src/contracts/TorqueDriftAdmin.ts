/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "./common";

export declare namespace ITorqueDriftStructs {
  export type GlobalStateStruct = {
    totalMinted: BigNumberish;
    maxSupply: BigNumberish;
    baseRate: BigNumberish;
    lastHalving: BigNumberish;
    halvingCount: BigNumberish;
    nextHalvingThreshold: BigNumberish;
    emergencyTimestamp: BigNumberish;
    pendingBaseRate: BigNumberish;
    pendingMaxSupply: BigNumberish;
    timelockExpires: BigNumberish;
    timelockDuration: BigNumberish;
    upgradeProposedAt: BigNumberish;
    totalUsers: BigNumberish;
    totalHashPower: BigNumberish;
    totalTokensClaimed: BigNumberish;
    lastStatsUpdate: BigNumberish;
    admin: AddressLike;
    tokenMint: AddressLike;
    pendingAdmin: AddressLike;
    emergencyReason: BytesLike;
    mintingPaused: boolean;
    emergencyPause: boolean;
    claimPaused: boolean;
    equipPaused: boolean;
    lockPaused: boolean;
  };

  export type GlobalStateStructOutput = [
    totalMinted: bigint,
    maxSupply: bigint,
    baseRate: bigint,
    lastHalving: bigint,
    halvingCount: bigint,
    nextHalvingThreshold: bigint,
    emergencyTimestamp: bigint,
    pendingBaseRate: bigint,
    pendingMaxSupply: bigint,
    timelockExpires: bigint,
    timelockDuration: bigint,
    upgradeProposedAt: bigint,
    totalUsers: bigint,
    totalHashPower: bigint,
    totalTokensClaimed: bigint,
    lastStatsUpdate: bigint,
    admin: string,
    tokenMint: string,
    pendingAdmin: string,
    emergencyReason: string,
    mintingPaused: boolean,
    emergencyPause: boolean,
    claimPaused: boolean,
    equipPaused: boolean,
    lockPaused: boolean
  ] & {
    totalMinted: bigint;
    maxSupply: bigint;
    baseRate: bigint;
    lastHalving: bigint;
    halvingCount: bigint;
    nextHalvingThreshold: bigint;
    emergencyTimestamp: bigint;
    pendingBaseRate: bigint;
    pendingMaxSupply: bigint;
    timelockExpires: bigint;
    timelockDuration: bigint;
    upgradeProposedAt: bigint;
    totalUsers: bigint;
    totalHashPower: bigint;
    totalTokensClaimed: bigint;
    lastStatsUpdate: bigint;
    admin: string;
    tokenMint: string;
    pendingAdmin: string;
    emergencyReason: string;
    mintingPaused: boolean;
    emergencyPause: boolean;
    claimPaused: boolean;
    equipPaused: boolean;
    lockPaused: boolean;
  };
}

export interface TorqueDriftAdminInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "UPGRADE_INTERFACE_VERSION"
      | "createAdditionalCar"
      | "gameContract"
      | "getGlobalState"
      | "initialize"
      | "owner"
      | "proxiableUUID"
      | "renounceOwnership"
      | "resumeEmergencyPause"
      | "setBaseRate"
      | "toggleCircuitBreaker"
      | "toggleMinting"
      | "transferOwnership"
      | "triggerEmergencyPause"
      | "updateTokenMint"
      | "upgradeToAndCall"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic: "Initialized" | "OwnershipTransferred" | "Upgraded"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "UPGRADE_INTERFACE_VERSION",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "createAdditionalCar",
    values: [AddressLike, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "gameContract",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getGlobalState",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [AddressLike, ITorqueDriftStructs.GlobalStateStruct]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "proxiableUUID",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "resumeEmergencyPause",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setBaseRate",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "toggleCircuitBreaker",
    values: [BigNumberish, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "toggleMinting",
    values: [boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "triggerEmergencyPause",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "updateTokenMint",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "upgradeToAndCall",
    values: [AddressLike, BytesLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "UPGRADE_INTERFACE_VERSION",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createAdditionalCar",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "gameContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getGlobalState",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "proxiableUUID",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "resumeEmergencyPause",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setBaseRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "toggleCircuitBreaker",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "toggleMinting",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "triggerEmergencyPause",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateTokenMint",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "upgradeToAndCall",
    data: BytesLike
  ): Result;
}

export namespace InitializedEvent {
  export type InputTuple = [version: BigNumberish];
  export type OutputTuple = [version: bigint];
  export interface OutputObject {
    version: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UpgradedEvent {
  export type InputTuple = [implementation: AddressLike];
  export type OutputTuple = [implementation: string];
  export interface OutputObject {
    implementation: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface TorqueDriftAdmin extends BaseContract {
  connect(runner?: ContractRunner | null): TorqueDriftAdmin;
  waitForDeployment(): Promise<this>;

  interface: TorqueDriftAdminInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  UPGRADE_INTERFACE_VERSION: TypedContractMethod<[], [string], "view">;

  createAdditionalCar: TypedContractMethod<
    [user: AddressLike, rarity: BigNumberish, version: BigNumberish],
    [void],
    "nonpayable"
  >;

  gameContract: TypedContractMethod<[], [string], "view">;

  getGlobalState: TypedContractMethod<
    [],
    [ITorqueDriftStructs.GlobalStateStructOutput],
    "view"
  >;

  initialize: TypedContractMethod<
    [
      _gameContract: AddressLike,
      _globalState: ITorqueDriftStructs.GlobalStateStruct
    ],
    [void],
    "nonpayable"
  >;

  owner: TypedContractMethod<[], [string], "view">;

  proxiableUUID: TypedContractMethod<[], [string], "view">;

  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  resumeEmergencyPause: TypedContractMethod<[], [void], "nonpayable">;

  setBaseRate: TypedContractMethod<
    [newRate: BigNumberish],
    [void],
    "nonpayable"
  >;

  toggleCircuitBreaker: TypedContractMethod<
    [breakerType: BigNumberish, pause: boolean],
    [void],
    "nonpayable"
  >;

  toggleMinting: TypedContractMethod<[pause: boolean], [void], "nonpayable">;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  triggerEmergencyPause: TypedContractMethod<
    [reason: string],
    [void],
    "nonpayable"
  >;

  updateTokenMint: TypedContractMethod<
    [newTokenMint: AddressLike],
    [void],
    "nonpayable"
  >;

  upgradeToAndCall: TypedContractMethod<
    [newImplementation: AddressLike, data: BytesLike],
    [void],
    "payable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "UPGRADE_INTERFACE_VERSION"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "createAdditionalCar"
  ): TypedContractMethod<
    [user: AddressLike, rarity: BigNumberish, version: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "gameContract"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "getGlobalState"
  ): TypedContractMethod<
    [],
    [ITorqueDriftStructs.GlobalStateStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "initialize"
  ): TypedContractMethod<
    [
      _gameContract: AddressLike,
      _globalState: ITorqueDriftStructs.GlobalStateStruct
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "proxiableUUID"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "resumeEmergencyPause"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setBaseRate"
  ): TypedContractMethod<[newRate: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "toggleCircuitBreaker"
  ): TypedContractMethod<
    [breakerType: BigNumberish, pause: boolean],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "toggleMinting"
  ): TypedContractMethod<[pause: boolean], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "triggerEmergencyPause"
  ): TypedContractMethod<[reason: string], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "updateTokenMint"
  ): TypedContractMethod<[newTokenMint: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "upgradeToAndCall"
  ): TypedContractMethod<
    [newImplementation: AddressLike, data: BytesLike],
    [void],
    "payable"
  >;

  getEvent(
    key: "Initialized"
  ): TypedContractEvent<
    InitializedEvent.InputTuple,
    InitializedEvent.OutputTuple,
    InitializedEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;
  getEvent(
    key: "Upgraded"
  ): TypedContractEvent<
    UpgradedEvent.InputTuple,
    UpgradedEvent.OutputTuple,
    UpgradedEvent.OutputObject
  >;

  filters: {
    "Initialized(uint64)": TypedContractEvent<
      InitializedEvent.InputTuple,
      InitializedEvent.OutputTuple,
      InitializedEvent.OutputObject
    >;
    Initialized: TypedContractEvent<
      InitializedEvent.InputTuple,
      InitializedEvent.OutputTuple,
      InitializedEvent.OutputObject
    >;

    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;

    "Upgraded(address)": TypedContractEvent<
      UpgradedEvent.InputTuple,
      UpgradedEvent.OutputTuple,
      UpgradedEvent.OutputObject
    >;
    Upgraded: TypedContractEvent<
      UpgradedEvent.InputTuple,
      UpgradedEvent.OutputTuple,
      UpgradedEvent.OutputObject
    >;
  };
}
