/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "./common";

export declare namespace ITorqueDriftStructs {
  export type GlobalStateStruct = {
    totalMinted: BigNumberish;
    maxSupply: BigNumberish;
    baseRate: BigNumberish;
    lastHalving: BigNumberish;
    halvingCount: BigNumberish;
    nextHalvingThreshold: BigNumberish;
    mintingPaused: boolean;
    admin: AddressLike;
    tokenMint: AddressLike;
    emergencyPause: boolean;
    claimPaused: boolean;
    equipPaused: boolean;
    gamblePaused: boolean;
    lockPaused: boolean;
    emergencyTimestamp: BigNumberish;
    emergencyReason: BytesLike;
    pendingAdmin: AddressLike;
    pendingBaseRate: BigNumberish;
    pendingMaxSupply: BigNumberish;
    timelockExpires: BigNumberish;
    timelockDuration: BigNumberish;
    upgradeProposedAt: BigNumberish;
    totalUsers: BigNumberish;
    totalHashPower: BigNumberish;
    totalTokensClaimed: BigNumberish;
    lastStatsUpdate: BigNumberish;
  };

  export type GlobalStateStructOutput = [
    totalMinted: bigint,
    maxSupply: bigint,
    baseRate: bigint,
    lastHalving: bigint,
    halvingCount: bigint,
    nextHalvingThreshold: bigint,
    mintingPaused: boolean,
    admin: string,
    tokenMint: string,
    emergencyPause: boolean,
    claimPaused: boolean,
    equipPaused: boolean,
    gamblePaused: boolean,
    lockPaused: boolean,
    emergencyTimestamp: bigint,
    emergencyReason: string,
    pendingAdmin: string,
    pendingBaseRate: bigint,
    pendingMaxSupply: bigint,
    timelockExpires: bigint,
    timelockDuration: bigint,
    upgradeProposedAt: bigint,
    totalUsers: bigint,
    totalHashPower: bigint,
    totalTokensClaimed: bigint,
    lastStatsUpdate: bigint
  ] & {
    totalMinted: bigint;
    maxSupply: bigint;
    baseRate: bigint;
    lastHalving: bigint;
    halvingCount: bigint;
    nextHalvingThreshold: bigint;
    mintingPaused: boolean;
    admin: string;
    tokenMint: string;
    emergencyPause: boolean;
    claimPaused: boolean;
    equipPaused: boolean;
    gamblePaused: boolean;
    lockPaused: boolean;
    emergencyTimestamp: bigint;
    emergencyReason: string;
    pendingAdmin: string;
    pendingBaseRate: bigint;
    pendingMaxSupply: bigint;
    timelockExpires: bigint;
    timelockDuration: bigint;
    upgradeProposedAt: bigint;
    totalUsers: bigint;
    totalHashPower: bigint;
    totalTokensClaimed: bigint;
    lastStatsUpdate: bigint;
  };

  export type CarInfoStruct = {
    mint: AddressLike;
    hashPower: BigNumberish;
    rarity: BigNumberish;
    version: BigNumberish;
    slotIndex: BigNumberish;
  };

  export type CarInfoStructOutput = [
    mint: string,
    hashPower: bigint,
    rarity: bigint,
    version: bigint,
    slotIndex: bigint
  ] & {
    mint: string;
    hashPower: bigint;
    rarity: bigint;
    version: bigint;
    slotIndex: bigint;
  };

  export type LockInfoStruct = {
    amount: BigNumberish;
    unlockTime: BigNumberish;
    boostPercent: BigNumberish;
  };

  export type LockInfoStructOutput = [
    amount: bigint,
    unlockTime: bigint,
    boostPercent: bigint
  ] & { amount: bigint; unlockTime: bigint; boostPercent: bigint };

  export type UserStateStruct = {
    lastClaim: BigNumberish;
    totalHashPower: BigNumberish;
    slots: [AddressLike, AddressLike, AddressLike, AddressLike, AddressLike];
    lock: ITorqueDriftStructs.LockInfoStruct;
    discount: BigNumberish;
    gambleUsed: boolean;
    boostPercent: BigNumberish;
    boostStartTime: BigNumberish;
    boostDuration: BigNumberish;
    equippedCar: boolean;
    gameStarted: boolean;
    lastEquipTime: BigNumberish;
    equipCountToday: BigNumberish;
    lastEquipDay: BigNumberish;
    lastGambleTime: BigNumberish;
    gambleCountToday: BigNumberish;
    lastGambleDay: BigNumberish;
    lastLockTime: BigNumberish;
    totalClaimed: BigNumberish;
    referrer: AddressLike;
    referralCount: BigNumberish;
    referralEarnings: BigNumberish;
  };

  export type UserStateStructOutput = [
    lastClaim: bigint,
    totalHashPower: bigint,
    slots: [string, string, string, string, string],
    lock: ITorqueDriftStructs.LockInfoStructOutput,
    discount: bigint,
    gambleUsed: boolean,
    boostPercent: bigint,
    boostStartTime: bigint,
    boostDuration: bigint,
    equippedCar: boolean,
    gameStarted: boolean,
    lastEquipTime: bigint,
    equipCountToday: bigint,
    lastEquipDay: bigint,
    lastGambleTime: bigint,
    gambleCountToday: bigint,
    lastGambleDay: bigint,
    lastLockTime: bigint,
    totalClaimed: bigint,
    referrer: string,
    referralCount: bigint,
    referralEarnings: bigint
  ] & {
    lastClaim: bigint;
    totalHashPower: bigint;
    slots: [string, string, string, string, string];
    lock: ITorqueDriftStructs.LockInfoStructOutput;
    discount: bigint;
    gambleUsed: boolean;
    boostPercent: bigint;
    boostStartTime: bigint;
    boostDuration: bigint;
    equippedCar: boolean;
    gameStarted: boolean;
    lastEquipTime: bigint;
    equipCountToday: bigint;
    lastEquipDay: bigint;
    lastGambleTime: bigint;
    gambleCountToday: bigint;
    lastGambleDay: bigint;
    lastLockTime: bigint;
    totalClaimed: bigint;
    referrer: string;
    referralCount: bigint;
    referralEarnings: bigint;
  };
}

export interface TorqueDriftGameInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "CLOCK_DRIFT_TOLERANCE"
      | "DEFAULT_TIMELOCK_DURATION"
      | "MIN_CLAIM_COOLDOWN"
      | "PENALTY_1H_BURN_BPS"
      | "PENALTY_1H_SOL"
      | "PENALTY_2H_BURN_BPS"
      | "PENALTY_2H_SOL"
      | "PENALTY_3H_BURN_BPS"
      | "PENALTY_3H_SOL"
      | "PENALTY_4H_BURN_BPS"
      | "PENALTY_4H_SOL"
      | "REFERRAL_BOOST_DURATION"
      | "SECONDS_PER_DAY"
      | "SECONDS_PER_HOUR"
      | "TREASURY_WALLET"
      | "applySinks"
      | "calculateTotalReward"
      | "cancelUpgrade"
      | "carsContract"
      | "claimTokens"
      | "emergencyRescueTokens"
      | "equipCar"
      | "equippedCars"
      | "executeUpgrade"
      | "gambleDiscount"
      | "getGlobalState"
      | "getLockVaultBalance"
      | "getReferralInfo"
      | "getUserCars"
      | "getUserInfo"
      | "getUserState"
      | "globalState"
      | "initializeStartGame"
      | "lockTokens"
      | "lockVault"
      | "previewClaim"
      | "proposeAdminChange"
      | "proposeBaseRateChange"
      | "proposeMaxSupplyChange"
      | "referralCounts"
      | "referrals"
      | "resetExpiredBoosts"
      | "resumeEmergencyPause"
      | "setBaseRate"
      | "setTimelockDuration"
      | "toggleCircuitBreaker"
      | "toggleMinting"
      | "tokenContract"
      | "triggerEmergencyPause"
      | "unequipCar"
      | "unlockTokens"
      | "updateTokenMint"
      | "userStates"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "CarEquipped"
      | "CarUnequipped"
      | "ClaimPreview"
      | "GambleResult"
      | "GameStarted"
      | "HalvingTriggered"
      | "ReferralApplied"
      | "TokensBurned"
      | "TokensClaimed"
      | "TokensLocked"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "CLOCK_DRIFT_TOLERANCE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "DEFAULT_TIMELOCK_DURATION",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MIN_CLAIM_COOLDOWN",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "PENALTY_1H_BURN_BPS",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "PENALTY_1H_SOL",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "PENALTY_2H_BURN_BPS",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "PENALTY_2H_SOL",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "PENALTY_3H_BURN_BPS",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "PENALTY_3H_SOL",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "PENALTY_4H_BURN_BPS",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "PENALTY_4H_SOL",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "REFERRAL_BOOST_DURATION",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "SECONDS_PER_DAY",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "SECONDS_PER_HOUR",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "TREASURY_WALLET",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "applySinks",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "calculateTotalReward",
    values: [AddressLike, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "cancelUpgrade",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "carsContract",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "claimTokens",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "emergencyRescueTokens",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "equipCar",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "equippedCars",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "executeUpgrade",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "gambleDiscount",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getGlobalState",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getLockVaultBalance",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getReferralInfo",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getUserCars",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getUserInfo",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getUserState",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "globalState",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "initializeStartGame",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "lockTokens",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "lockVault",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "previewClaim",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "proposeAdminChange",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "proposeBaseRateChange",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "proposeMaxSupplyChange",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "referralCounts",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "referrals",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "resetExpiredBoosts",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "resumeEmergencyPause",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setBaseRate",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setTimelockDuration",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "toggleCircuitBreaker",
    values: [BigNumberish, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "toggleMinting",
    values: [boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "tokenContract",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "triggerEmergencyPause",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "unequipCar",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "unlockTokens",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "updateTokenMint",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "userStates",
    values: [AddressLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "CLOCK_DRIFT_TOLERANCE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "DEFAULT_TIMELOCK_DURATION",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "MIN_CLAIM_COOLDOWN",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "PENALTY_1H_BURN_BPS",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "PENALTY_1H_SOL",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "PENALTY_2H_BURN_BPS",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "PENALTY_2H_SOL",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "PENALTY_3H_BURN_BPS",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "PENALTY_3H_SOL",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "PENALTY_4H_BURN_BPS",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "PENALTY_4H_SOL",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "REFERRAL_BOOST_DURATION",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "SECONDS_PER_DAY",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "SECONDS_PER_HOUR",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "TREASURY_WALLET",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "applySinks", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "calculateTotalReward",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "cancelUpgrade",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "carsContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "claimTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "emergencyRescueTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "equipCar", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "equippedCars",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "executeUpgrade",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "gambleDiscount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getGlobalState",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getLockVaultBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getReferralInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUserCars",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUserInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUserState",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "globalState",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "initializeStartGame",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "lockTokens", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "lockVault", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "previewClaim",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "proposeAdminChange",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "proposeBaseRateChange",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "proposeMaxSupplyChange",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "referralCounts",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "referrals", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "resetExpiredBoosts",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "resumeEmergencyPause",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setBaseRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setTimelockDuration",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "toggleCircuitBreaker",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "toggleMinting",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tokenContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "triggerEmergencyPause",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "unequipCar", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "unlockTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateTokenMint",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "userStates", data: BytesLike): Result;
}

export namespace CarEquippedEvent {
  export type InputTuple = [
    user: AddressLike,
    carMint: AddressLike,
    hashPower: BigNumberish,
    slot: BigNumberish
  ];
  export type OutputTuple = [
    user: string,
    carMint: string,
    hashPower: bigint,
    slot: bigint
  ];
  export interface OutputObject {
    user: string;
    carMint: string;
    hashPower: bigint;
    slot: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace CarUnequippedEvent {
  export type InputTuple = [
    user: AddressLike,
    carMint: AddressLike,
    slot: BigNumberish
  ];
  export type OutputTuple = [user: string, carMint: string, slot: bigint];
  export interface OutputObject {
    user: string;
    carMint: string;
    slot: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ClaimPreviewEvent {
  export type InputTuple = [
    user: AddressLike,
    claimableAmount: BigNumberish,
    baseReward: BigNumberish,
    lockBoost: BigNumberish,
    referralBoost: BigNumberish,
    elapsedSeconds: BigNumberish,
    currentTimestamp: BigNumberish
  ];
  export type OutputTuple = [
    user: string,
    claimableAmount: bigint,
    baseReward: bigint,
    lockBoost: bigint,
    referralBoost: bigint,
    elapsedSeconds: bigint,
    currentTimestamp: bigint
  ];
  export interface OutputObject {
    user: string;
    claimableAmount: bigint;
    baseReward: bigint;
    lockBoost: bigint;
    referralBoost: bigint;
    elapsedSeconds: bigint;
    currentTimestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace GambleResultEvent {
  export type InputTuple = [
    user: AddressLike,
    gamblePercent: BigNumberish,
    success: boolean,
    discount: BigNumberish
  ];
  export type OutputTuple = [
    user: string,
    gamblePercent: bigint,
    success: boolean,
    discount: bigint
  ];
  export interface OutputObject {
    user: string;
    gamblePercent: bigint;
    success: boolean;
    discount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace GameStartedEvent {
  export type InputTuple = [
    user: AddressLike,
    paymentAmount: BigNumberish,
    carMint: AddressLike,
    timestamp: BigNumberish
  ];
  export type OutputTuple = [
    user: string,
    paymentAmount: bigint,
    carMint: string,
    timestamp: bigint
  ];
  export interface OutputObject {
    user: string;
    paymentAmount: bigint;
    carMint: string;
    timestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace HalvingTriggeredEvent {
  export type InputTuple = [
    halvingCount: BigNumberish,
    newBaseRate: BigNumberish,
    nextThreshold: BigNumberish,
    timestamp: BigNumberish
  ];
  export type OutputTuple = [
    halvingCount: bigint,
    newBaseRate: bigint,
    nextThreshold: bigint,
    timestamp: bigint
  ];
  export interface OutputObject {
    halvingCount: bigint;
    newBaseRate: bigint;
    nextThreshold: bigint;
    timestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ReferralAppliedEvent {
  export type InputTuple = [
    referrer: AddressLike,
    referee: AddressLike,
    discountGranted: BigNumberish,
    boostPercent: BigNumberish,
    boostDuration: BigNumberish,
    timestamp: BigNumberish
  ];
  export type OutputTuple = [
    referrer: string,
    referee: string,
    discountGranted: bigint,
    boostPercent: bigint,
    boostDuration: bigint,
    timestamp: bigint
  ];
  export interface OutputObject {
    referrer: string;
    referee: string;
    discountGranted: bigint;
    boostPercent: bigint;
    boostDuration: bigint;
    timestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TokensBurnedEvent {
  export type InputTuple = [
    user: AddressLike,
    amount: BigNumberish,
    timestamp: BigNumberish
  ];
  export type OutputTuple = [user: string, amount: bigint, timestamp: bigint];
  export interface OutputObject {
    user: string;
    amount: bigint;
    timestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TokensClaimedEvent {
  export type InputTuple = [
    user: AddressLike,
    amount: BigNumberish,
    timestamp: BigNumberish
  ];
  export type OutputTuple = [user: string, amount: bigint, timestamp: bigint];
  export interface OutputObject {
    user: string;
    amount: bigint;
    timestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TokensLockedEvent {
  export type InputTuple = [
    user: AddressLike,
    amount: BigNumberish,
    unlockTime: BigNumberish,
    boostPercent: BigNumberish
  ];
  export type OutputTuple = [
    user: string,
    amount: bigint,
    unlockTime: bigint,
    boostPercent: bigint
  ];
  export interface OutputObject {
    user: string;
    amount: bigint;
    unlockTime: bigint;
    boostPercent: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface TorqueDriftGame extends BaseContract {
  connect(runner?: ContractRunner | null): TorqueDriftGame;
  waitForDeployment(): Promise<this>;

  interface: TorqueDriftGameInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  CLOCK_DRIFT_TOLERANCE: TypedContractMethod<[], [bigint], "view">;

  DEFAULT_TIMELOCK_DURATION: TypedContractMethod<[], [bigint], "view">;

  MIN_CLAIM_COOLDOWN: TypedContractMethod<[], [bigint], "view">;

  PENALTY_1H_BURN_BPS: TypedContractMethod<[], [bigint], "view">;

  PENALTY_1H_SOL: TypedContractMethod<[], [bigint], "view">;

  PENALTY_2H_BURN_BPS: TypedContractMethod<[], [bigint], "view">;

  PENALTY_2H_SOL: TypedContractMethod<[], [bigint], "view">;

  PENALTY_3H_BURN_BPS: TypedContractMethod<[], [bigint], "view">;

  PENALTY_3H_SOL: TypedContractMethod<[], [bigint], "view">;

  PENALTY_4H_BURN_BPS: TypedContractMethod<[], [bigint], "view">;

  PENALTY_4H_SOL: TypedContractMethod<[], [bigint], "view">;

  REFERRAL_BOOST_DURATION: TypedContractMethod<[], [bigint], "view">;

  SECONDS_PER_DAY: TypedContractMethod<[], [bigint], "view">;

  SECONDS_PER_HOUR: TypedContractMethod<[], [bigint], "view">;

  TREASURY_WALLET: TypedContractMethod<[], [string], "view">;

  applySinks: TypedContractMethod<[], [void], "nonpayable">;

  calculateTotalReward: TypedContractMethod<
    [
      user: AddressLike,
      elapsedSeconds: BigNumberish,
      currentTimestamp: BigNumberish
    ],
    [bigint],
    "view"
  >;

  cancelUpgrade: TypedContractMethod<[], [void], "nonpayable">;

  carsContract: TypedContractMethod<[], [string], "view">;

  claimTokens: TypedContractMethod<[], [void], "payable">;

  emergencyRescueTokens: TypedContractMethod<
    [token: AddressLike, amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  equipCar: TypedContractMethod<
    [carAddress: AddressLike, slotIndex: BigNumberish],
    [void],
    "nonpayable"
  >;

  equippedCars: TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [
      [string, bigint, bigint, bigint, bigint] & {
        mint: string;
        hashPower: bigint;
        rarity: bigint;
        version: bigint;
        slotIndex: bigint;
      }
    ],
    "view"
  >;

  executeUpgrade: TypedContractMethod<[], [void], "nonpayable">;

  gambleDiscount: TypedContractMethod<
    [gamblePercent: BigNumberish, serverRandomness: BigNumberish],
    [void],
    "nonpayable"
  >;

  getGlobalState: TypedContractMethod<
    [],
    [ITorqueDriftStructs.GlobalStateStructOutput],
    "view"
  >;

  getLockVaultBalance: TypedContractMethod<
    [user: AddressLike],
    [bigint],
    "view"
  >;

  getReferralInfo: TypedContractMethod<
    [user: AddressLike],
    [
      [string, bigint, bigint, boolean] & {
        referrer: string;
        referralCount: bigint;
        referralEarnings: bigint;
        hasActiveReferralBoost: boolean;
      }
    ],
    "view"
  >;

  getUserCars: TypedContractMethod<
    [],
    [
      [
        [
          ITorqueDriftStructs.CarInfoStructOutput,
          ITorqueDriftStructs.CarInfoStructOutput,
          ITorqueDriftStructs.CarInfoStructOutput,
          ITorqueDriftStructs.CarInfoStructOutput,
          ITorqueDriftStructs.CarInfoStructOutput
        ],
        bigint,
        bigint
      ] & {
        equippedCars_: [
          ITorqueDriftStructs.CarInfoStructOutput,
          ITorqueDriftStructs.CarInfoStructOutput,
          ITorqueDriftStructs.CarInfoStructOutput,
          ITorqueDriftStructs.CarInfoStructOutput,
          ITorqueDriftStructs.CarInfoStructOutput
        ];
        totalEquipped: bigint;
        totalHashPower: bigint;
      }
    ],
    "view"
  >;

  getUserInfo: TypedContractMethod<
    [],
    [
      [boolean, bigint, bigint, bigint, boolean, bigint, bigint] & {
        gameStarted_: boolean;
        totalHashPower: bigint;
        lastClaim: bigint;
        discount: bigint;
        equippedCar: boolean;
        boostPercent: bigint;
        equippedCount: bigint;
      }
    ],
    "view"
  >;

  getUserState: TypedContractMethod<
    [user: AddressLike],
    [ITorqueDriftStructs.UserStateStructOutput],
    "view"
  >;

  globalState: TypedContractMethod<
    [],
    [
      [
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        boolean,
        string,
        string,
        boolean,
        boolean,
        boolean,
        boolean,
        boolean,
        bigint,
        string,
        string,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint
      ] & {
        totalMinted: bigint;
        maxSupply: bigint;
        baseRate: bigint;
        lastHalving: bigint;
        halvingCount: bigint;
        nextHalvingThreshold: bigint;
        mintingPaused: boolean;
        admin: string;
        tokenMint: string;
        emergencyPause: boolean;
        claimPaused: boolean;
        equipPaused: boolean;
        gamblePaused: boolean;
        lockPaused: boolean;
        emergencyTimestamp: bigint;
        emergencyReason: string;
        pendingAdmin: string;
        pendingBaseRate: bigint;
        pendingMaxSupply: bigint;
        timelockExpires: bigint;
        timelockDuration: bigint;
        upgradeProposedAt: bigint;
        totalUsers: bigint;
        totalHashPower: bigint;
        totalTokensClaimed: bigint;
        lastStatsUpdate: bigint;
      }
    ],
    "view"
  >;

  initializeStartGame: TypedContractMethod<
    [referrer: AddressLike],
    [void],
    "payable"
  >;

  lockTokens: TypedContractMethod<
    [amount: BigNumberish, days_: BigNumberish],
    [void],
    "nonpayable"
  >;

  lockVault: TypedContractMethod<[arg0: AddressLike], [bigint], "view">;

  previewClaim: TypedContractMethod<
    [user: AddressLike],
    [
      [bigint, bigint, bigint, bigint] & {
        claimableAmount: bigint;
        baseReward: bigint;
        lockBoost: bigint;
        referralBoost: bigint;
      }
    ],
    "view"
  >;

  proposeAdminChange: TypedContractMethod<
    [newAdmin: AddressLike],
    [void],
    "nonpayable"
  >;

  proposeBaseRateChange: TypedContractMethod<
    [newRate: BigNumberish],
    [void],
    "nonpayable"
  >;

  proposeMaxSupplyChange: TypedContractMethod<
    [newMaxSupply: BigNumberish],
    [void],
    "nonpayable"
  >;

  referralCounts: TypedContractMethod<[arg0: AddressLike], [bigint], "view">;

  referrals: TypedContractMethod<[arg0: AddressLike], [string], "view">;

  resetExpiredBoosts: TypedContractMethod<[], [void], "nonpayable">;

  resumeEmergencyPause: TypedContractMethod<[], [void], "nonpayable">;

  setBaseRate: TypedContractMethod<
    [newRate: BigNumberish],
    [void],
    "nonpayable"
  >;

  setTimelockDuration: TypedContractMethod<
    [newDurationDays: BigNumberish],
    [void],
    "nonpayable"
  >;

  toggleCircuitBreaker: TypedContractMethod<
    [breakerType: BigNumberish, pause: boolean],
    [void],
    "nonpayable"
  >;

  toggleMinting: TypedContractMethod<[pause: boolean], [void], "nonpayable">;

  tokenContract: TypedContractMethod<[], [string], "view">;

  triggerEmergencyPause: TypedContractMethod<
    [reason: string],
    [void],
    "nonpayable"
  >;

  unequipCar: TypedContractMethod<
    [carAddress: AddressLike, slotIndex: BigNumberish],
    [void],
    "nonpayable"
  >;

  unlockTokens: TypedContractMethod<[], [void], "nonpayable">;

  updateTokenMint: TypedContractMethod<
    [newTokenMint: AddressLike],
    [void],
    "nonpayable"
  >;

  userStates: TypedContractMethod<
    [arg0: AddressLike],
    [
      [
        bigint,
        bigint,
        ITorqueDriftStructs.LockInfoStructOutput,
        bigint,
        boolean,
        bigint,
        bigint,
        bigint,
        boolean,
        boolean,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        string,
        bigint,
        bigint
      ] & {
        lastClaim: bigint;
        totalHashPower: bigint;
        lock: ITorqueDriftStructs.LockInfoStructOutput;
        discount: bigint;
        gambleUsed: boolean;
        boostPercent: bigint;
        boostStartTime: bigint;
        boostDuration: bigint;
        equippedCar: boolean;
        gameStarted: boolean;
        lastEquipTime: bigint;
        equipCountToday: bigint;
        lastEquipDay: bigint;
        lastGambleTime: bigint;
        gambleCountToday: bigint;
        lastGambleDay: bigint;
        lastLockTime: bigint;
        totalClaimed: bigint;
        referrer: string;
        referralCount: bigint;
        referralEarnings: bigint;
      }
    ],
    "view"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "CLOCK_DRIFT_TOLERANCE"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "DEFAULT_TIMELOCK_DURATION"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "MIN_CLAIM_COOLDOWN"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "PENALTY_1H_BURN_BPS"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "PENALTY_1H_SOL"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "PENALTY_2H_BURN_BPS"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "PENALTY_2H_SOL"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "PENALTY_3H_BURN_BPS"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "PENALTY_3H_SOL"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "PENALTY_4H_BURN_BPS"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "PENALTY_4H_SOL"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "REFERRAL_BOOST_DURATION"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "SECONDS_PER_DAY"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "SECONDS_PER_HOUR"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "TREASURY_WALLET"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "applySinks"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "calculateTotalReward"
  ): TypedContractMethod<
    [
      user: AddressLike,
      elapsedSeconds: BigNumberish,
      currentTimestamp: BigNumberish
    ],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "cancelUpgrade"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "carsContract"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "claimTokens"
  ): TypedContractMethod<[], [void], "payable">;
  getFunction(
    nameOrSignature: "emergencyRescueTokens"
  ): TypedContractMethod<
    [token: AddressLike, amount: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "equipCar"
  ): TypedContractMethod<
    [carAddress: AddressLike, slotIndex: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "equippedCars"
  ): TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [
      [string, bigint, bigint, bigint, bigint] & {
        mint: string;
        hashPower: bigint;
        rarity: bigint;
        version: bigint;
        slotIndex: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "executeUpgrade"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "gambleDiscount"
  ): TypedContractMethod<
    [gamblePercent: BigNumberish, serverRandomness: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "getGlobalState"
  ): TypedContractMethod<
    [],
    [ITorqueDriftStructs.GlobalStateStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getLockVaultBalance"
  ): TypedContractMethod<[user: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "getReferralInfo"
  ): TypedContractMethod<
    [user: AddressLike],
    [
      [string, bigint, bigint, boolean] & {
        referrer: string;
        referralCount: bigint;
        referralEarnings: bigint;
        hasActiveReferralBoost: boolean;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "getUserCars"
  ): TypedContractMethod<
    [],
    [
      [
        [
          ITorqueDriftStructs.CarInfoStructOutput,
          ITorqueDriftStructs.CarInfoStructOutput,
          ITorqueDriftStructs.CarInfoStructOutput,
          ITorqueDriftStructs.CarInfoStructOutput,
          ITorqueDriftStructs.CarInfoStructOutput
        ],
        bigint,
        bigint
      ] & {
        equippedCars_: [
          ITorqueDriftStructs.CarInfoStructOutput,
          ITorqueDriftStructs.CarInfoStructOutput,
          ITorqueDriftStructs.CarInfoStructOutput,
          ITorqueDriftStructs.CarInfoStructOutput,
          ITorqueDriftStructs.CarInfoStructOutput
        ];
        totalEquipped: bigint;
        totalHashPower: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "getUserInfo"
  ): TypedContractMethod<
    [],
    [
      [boolean, bigint, bigint, bigint, boolean, bigint, bigint] & {
        gameStarted_: boolean;
        totalHashPower: bigint;
        lastClaim: bigint;
        discount: bigint;
        equippedCar: boolean;
        boostPercent: bigint;
        equippedCount: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "getUserState"
  ): TypedContractMethod<
    [user: AddressLike],
    [ITorqueDriftStructs.UserStateStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "globalState"
  ): TypedContractMethod<
    [],
    [
      [
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        boolean,
        string,
        string,
        boolean,
        boolean,
        boolean,
        boolean,
        boolean,
        bigint,
        string,
        string,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint
      ] & {
        totalMinted: bigint;
        maxSupply: bigint;
        baseRate: bigint;
        lastHalving: bigint;
        halvingCount: bigint;
        nextHalvingThreshold: bigint;
        mintingPaused: boolean;
        admin: string;
        tokenMint: string;
        emergencyPause: boolean;
        claimPaused: boolean;
        equipPaused: boolean;
        gamblePaused: boolean;
        lockPaused: boolean;
        emergencyTimestamp: bigint;
        emergencyReason: string;
        pendingAdmin: string;
        pendingBaseRate: bigint;
        pendingMaxSupply: bigint;
        timelockExpires: bigint;
        timelockDuration: bigint;
        upgradeProposedAt: bigint;
        totalUsers: bigint;
        totalHashPower: bigint;
        totalTokensClaimed: bigint;
        lastStatsUpdate: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "initializeStartGame"
  ): TypedContractMethod<[referrer: AddressLike], [void], "payable">;
  getFunction(
    nameOrSignature: "lockTokens"
  ): TypedContractMethod<
    [amount: BigNumberish, days_: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "lockVault"
  ): TypedContractMethod<[arg0: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "previewClaim"
  ): TypedContractMethod<
    [user: AddressLike],
    [
      [bigint, bigint, bigint, bigint] & {
        claimableAmount: bigint;
        baseReward: bigint;
        lockBoost: bigint;
        referralBoost: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "proposeAdminChange"
  ): TypedContractMethod<[newAdmin: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "proposeBaseRateChange"
  ): TypedContractMethod<[newRate: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "proposeMaxSupplyChange"
  ): TypedContractMethod<[newMaxSupply: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "referralCounts"
  ): TypedContractMethod<[arg0: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "referrals"
  ): TypedContractMethod<[arg0: AddressLike], [string], "view">;
  getFunction(
    nameOrSignature: "resetExpiredBoosts"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "resumeEmergencyPause"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setBaseRate"
  ): TypedContractMethod<[newRate: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setTimelockDuration"
  ): TypedContractMethod<[newDurationDays: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "toggleCircuitBreaker"
  ): TypedContractMethod<
    [breakerType: BigNumberish, pause: boolean],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "toggleMinting"
  ): TypedContractMethod<[pause: boolean], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "tokenContract"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "triggerEmergencyPause"
  ): TypedContractMethod<[reason: string], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "unequipCar"
  ): TypedContractMethod<
    [carAddress: AddressLike, slotIndex: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "unlockTokens"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "updateTokenMint"
  ): TypedContractMethod<[newTokenMint: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "userStates"
  ): TypedContractMethod<
    [arg0: AddressLike],
    [
      [
        bigint,
        bigint,
        ITorqueDriftStructs.LockInfoStructOutput,
        bigint,
        boolean,
        bigint,
        bigint,
        bigint,
        boolean,
        boolean,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        string,
        bigint,
        bigint
      ] & {
        lastClaim: bigint;
        totalHashPower: bigint;
        lock: ITorqueDriftStructs.LockInfoStructOutput;
        discount: bigint;
        gambleUsed: boolean;
        boostPercent: bigint;
        boostStartTime: bigint;
        boostDuration: bigint;
        equippedCar: boolean;
        gameStarted: boolean;
        lastEquipTime: bigint;
        equipCountToday: bigint;
        lastEquipDay: bigint;
        lastGambleTime: bigint;
        gambleCountToday: bigint;
        lastGambleDay: bigint;
        lastLockTime: bigint;
        totalClaimed: bigint;
        referrer: string;
        referralCount: bigint;
        referralEarnings: bigint;
      }
    ],
    "view"
  >;

  getEvent(
    key: "CarEquipped"
  ): TypedContractEvent<
    CarEquippedEvent.InputTuple,
    CarEquippedEvent.OutputTuple,
    CarEquippedEvent.OutputObject
  >;
  getEvent(
    key: "CarUnequipped"
  ): TypedContractEvent<
    CarUnequippedEvent.InputTuple,
    CarUnequippedEvent.OutputTuple,
    CarUnequippedEvent.OutputObject
  >;
  getEvent(
    key: "ClaimPreview"
  ): TypedContractEvent<
    ClaimPreviewEvent.InputTuple,
    ClaimPreviewEvent.OutputTuple,
    ClaimPreviewEvent.OutputObject
  >;
  getEvent(
    key: "GambleResult"
  ): TypedContractEvent<
    GambleResultEvent.InputTuple,
    GambleResultEvent.OutputTuple,
    GambleResultEvent.OutputObject
  >;
  getEvent(
    key: "GameStarted"
  ): TypedContractEvent<
    GameStartedEvent.InputTuple,
    GameStartedEvent.OutputTuple,
    GameStartedEvent.OutputObject
  >;
  getEvent(
    key: "HalvingTriggered"
  ): TypedContractEvent<
    HalvingTriggeredEvent.InputTuple,
    HalvingTriggeredEvent.OutputTuple,
    HalvingTriggeredEvent.OutputObject
  >;
  getEvent(
    key: "ReferralApplied"
  ): TypedContractEvent<
    ReferralAppliedEvent.InputTuple,
    ReferralAppliedEvent.OutputTuple,
    ReferralAppliedEvent.OutputObject
  >;
  getEvent(
    key: "TokensBurned"
  ): TypedContractEvent<
    TokensBurnedEvent.InputTuple,
    TokensBurnedEvent.OutputTuple,
    TokensBurnedEvent.OutputObject
  >;
  getEvent(
    key: "TokensClaimed"
  ): TypedContractEvent<
    TokensClaimedEvent.InputTuple,
    TokensClaimedEvent.OutputTuple,
    TokensClaimedEvent.OutputObject
  >;
  getEvent(
    key: "TokensLocked"
  ): TypedContractEvent<
    TokensLockedEvent.InputTuple,
    TokensLockedEvent.OutputTuple,
    TokensLockedEvent.OutputObject
  >;

  filters: {
    "CarEquipped(address,address,uint256,uint8)": TypedContractEvent<
      CarEquippedEvent.InputTuple,
      CarEquippedEvent.OutputTuple,
      CarEquippedEvent.OutputObject
    >;
    CarEquipped: TypedContractEvent<
      CarEquippedEvent.InputTuple,
      CarEquippedEvent.OutputTuple,
      CarEquippedEvent.OutputObject
    >;

    "CarUnequipped(address,address,uint8)": TypedContractEvent<
      CarUnequippedEvent.InputTuple,
      CarUnequippedEvent.OutputTuple,
      CarUnequippedEvent.OutputObject
    >;
    CarUnequipped: TypedContractEvent<
      CarUnequippedEvent.InputTuple,
      CarUnequippedEvent.OutputTuple,
      CarUnequippedEvent.OutputObject
    >;

    "ClaimPreview(address,uint256,uint256,uint256,uint256,uint256,uint256)": TypedContractEvent<
      ClaimPreviewEvent.InputTuple,
      ClaimPreviewEvent.OutputTuple,
      ClaimPreviewEvent.OutputObject
    >;
    ClaimPreview: TypedContractEvent<
      ClaimPreviewEvent.InputTuple,
      ClaimPreviewEvent.OutputTuple,
      ClaimPreviewEvent.OutputObject
    >;

    "GambleResult(address,uint8,bool,uint256)": TypedContractEvent<
      GambleResultEvent.InputTuple,
      GambleResultEvent.OutputTuple,
      GambleResultEvent.OutputObject
    >;
    GambleResult: TypedContractEvent<
      GambleResultEvent.InputTuple,
      GambleResultEvent.OutputTuple,
      GambleResultEvent.OutputObject
    >;

    "GameStarted(address,uint256,address,uint256)": TypedContractEvent<
      GameStartedEvent.InputTuple,
      GameStartedEvent.OutputTuple,
      GameStartedEvent.OutputObject
    >;
    GameStarted: TypedContractEvent<
      GameStartedEvent.InputTuple,
      GameStartedEvent.OutputTuple,
      GameStartedEvent.OutputObject
    >;

    "HalvingTriggered(uint256,uint256,uint256,uint256)": TypedContractEvent<
      HalvingTriggeredEvent.InputTuple,
      HalvingTriggeredEvent.OutputTuple,
      HalvingTriggeredEvent.OutputObject
    >;
    HalvingTriggered: TypedContractEvent<
      HalvingTriggeredEvent.InputTuple,
      HalvingTriggeredEvent.OutputTuple,
      HalvingTriggeredEvent.OutputObject
    >;

    "ReferralApplied(address,address,uint256,uint256,uint256,uint256)": TypedContractEvent<
      ReferralAppliedEvent.InputTuple,
      ReferralAppliedEvent.OutputTuple,
      ReferralAppliedEvent.OutputObject
    >;
    ReferralApplied: TypedContractEvent<
      ReferralAppliedEvent.InputTuple,
      ReferralAppliedEvent.OutputTuple,
      ReferralAppliedEvent.OutputObject
    >;

    "TokensBurned(address,uint256,uint256)": TypedContractEvent<
      TokensBurnedEvent.InputTuple,
      TokensBurnedEvent.OutputTuple,
      TokensBurnedEvent.OutputObject
    >;
    TokensBurned: TypedContractEvent<
      TokensBurnedEvent.InputTuple,
      TokensBurnedEvent.OutputTuple,
      TokensBurnedEvent.OutputObject
    >;

    "TokensClaimed(address,uint256,uint256)": TypedContractEvent<
      TokensClaimedEvent.InputTuple,
      TokensClaimedEvent.OutputTuple,
      TokensClaimedEvent.OutputObject
    >;
    TokensClaimed: TypedContractEvent<
      TokensClaimedEvent.InputTuple,
      TokensClaimedEvent.OutputTuple,
      TokensClaimedEvent.OutputObject
    >;

    "TokensLocked(address,uint256,uint256,uint256)": TypedContractEvent<
      TokensLockedEvent.InputTuple,
      TokensLockedEvent.OutputTuple,
      TokensLockedEvent.OutputObject
    >;
    TokensLocked: TypedContractEvent<
      TokensLockedEvent.InputTuple,
      TokensLockedEvent.OutputTuple,
      TokensLockedEvent.OutputObject
    >;
  };
}
