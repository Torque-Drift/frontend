/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "./common";

export declare namespace ITorqueDriftStructs {
  export type GlobalStateStruct = {
    totalMinted: BigNumberish;
    maxSupply: BigNumberish;
    baseRate: BigNumberish;
    lastHalving: BigNumberish;
    halvingCount: BigNumberish;
    nextHalvingThreshold: BigNumberish;
    emergencyTimestamp: BigNumberish;
    pendingBaseRate: BigNumberish;
    pendingMaxSupply: BigNumberish;
    timelockExpires: BigNumberish;
    timelockDuration: BigNumberish;
    upgradeProposedAt: BigNumberish;
    totalUsers: BigNumberish;
    totalHashPower: BigNumberish;
    totalTokensClaimed: BigNumberish;
    lastStatsUpdate: BigNumberish;
    admin: AddressLike;
    tokenMint: AddressLike;
    pendingAdmin: AddressLike;
    emergencyReason: BytesLike;
    mintingPaused: boolean;
    emergencyPause: boolean;
    claimPaused: boolean;
    equipPaused: boolean;
    gamblePaused: boolean;
    lockPaused: boolean;
  };

  export type GlobalStateStructOutput = [
    totalMinted: bigint,
    maxSupply: bigint,
    baseRate: bigint,
    lastHalving: bigint,
    halvingCount: bigint,
    nextHalvingThreshold: bigint,
    emergencyTimestamp: bigint,
    pendingBaseRate: bigint,
    pendingMaxSupply: bigint,
    timelockExpires: bigint,
    timelockDuration: bigint,
    upgradeProposedAt: bigint,
    totalUsers: bigint,
    totalHashPower: bigint,
    totalTokensClaimed: bigint,
    lastStatsUpdate: bigint,
    admin: string,
    tokenMint: string,
    pendingAdmin: string,
    emergencyReason: string,
    mintingPaused: boolean,
    emergencyPause: boolean,
    claimPaused: boolean,
    equipPaused: boolean,
    gamblePaused: boolean,
    lockPaused: boolean
  ] & {
    totalMinted: bigint;
    maxSupply: bigint;
    baseRate: bigint;
    lastHalving: bigint;
    halvingCount: bigint;
    nextHalvingThreshold: bigint;
    emergencyTimestamp: bigint;
    pendingBaseRate: bigint;
    pendingMaxSupply: bigint;
    timelockExpires: bigint;
    timelockDuration: bigint;
    upgradeProposedAt: bigint;
    totalUsers: bigint;
    totalHashPower: bigint;
    totalTokensClaimed: bigint;
    lastStatsUpdate: bigint;
    admin: string;
    tokenMint: string;
    pendingAdmin: string;
    emergencyReason: string;
    mintingPaused: boolean;
    emergencyPause: boolean;
    claimPaused: boolean;
    equipPaused: boolean;
    gamblePaused: boolean;
    lockPaused: boolean;
  };

  export type CarInfoStruct = {
    mint: AddressLike;
    hashPower: BigNumberish;
    efficiency: BigNumberish;
    lastMaintenance: BigNumberish;
    rarity: BigNumberish;
    version: BigNumberish;
    slotIndex: BigNumberish;
  };

  export type CarInfoStructOutput = [
    mint: string,
    hashPower: bigint,
    efficiency: bigint,
    lastMaintenance: bigint,
    rarity: bigint,
    version: bigint,
    slotIndex: bigint
  ] & {
    mint: string;
    hashPower: bigint;
    efficiency: bigint;
    lastMaintenance: bigint;
    rarity: bigint;
    version: bigint;
    slotIndex: bigint;
  };

  export type LockInfoStruct = {
    amount: BigNumberish;
    unlockTime: BigNumberish;
    boostPercent: BigNumberish;
  };

  export type LockInfoStructOutput = [
    amount: bigint,
    unlockTime: bigint,
    boostPercent: bigint
  ] & { amount: bigint; unlockTime: bigint; boostPercent: bigint };

  export type UserStateStruct = {
    lastClaim: BigNumberish;
    totalHashPower: BigNumberish;
    discount: BigNumberish;
    boostPercent: BigNumberish;
    boostStartTime: BigNumberish;
    boostDuration: BigNumberish;
    lastGambleTime: BigNumberish;
    lastGambleDay: BigNumberish;
    lastLockTime: BigNumberish;
    totalClaimed: BigNumberish;
    referralEarnings: BigNumberish;
    referralEarningsLevel2: BigNumberish;
    cachedEffectiveHashPower: BigNumberish;
    lastEffectiveHashPowerUpdate: BigNumberish;
    lock: ITorqueDriftStructs.LockInfoStruct;
    referrer: AddressLike;
    referrerLevel2: AddressLike;
    slots: [AddressLike, AddressLike, AddressLike, AddressLike, AddressLike];
    referralCount: BigNumberish;
    gambleCountToday: BigNumberish;
    gambleUsed: boolean;
    equippedCar: boolean;
    gameStarted: boolean;
  };

  export type UserStateStructOutput = [
    lastClaim: bigint,
    totalHashPower: bigint,
    discount: bigint,
    boostPercent: bigint,
    boostStartTime: bigint,
    boostDuration: bigint,
    lastGambleTime: bigint,
    lastGambleDay: bigint,
    lastLockTime: bigint,
    totalClaimed: bigint,
    referralEarnings: bigint,
    referralEarningsLevel2: bigint,
    cachedEffectiveHashPower: bigint,
    lastEffectiveHashPowerUpdate: bigint,
    lock: ITorqueDriftStructs.LockInfoStructOutput,
    referrer: string,
    referrerLevel2: string,
    slots: [string, string, string, string, string],
    referralCount: bigint,
    gambleCountToday: bigint,
    gambleUsed: boolean,
    equippedCar: boolean,
    gameStarted: boolean
  ] & {
    lastClaim: bigint;
    totalHashPower: bigint;
    discount: bigint;
    boostPercent: bigint;
    boostStartTime: bigint;
    boostDuration: bigint;
    lastGambleTime: bigint;
    lastGambleDay: bigint;
    lastLockTime: bigint;
    totalClaimed: bigint;
    referralEarnings: bigint;
    referralEarningsLevel2: bigint;
    cachedEffectiveHashPower: bigint;
    lastEffectiveHashPowerUpdate: bigint;
    lock: ITorqueDriftStructs.LockInfoStructOutput;
    referrer: string;
    referrerLevel2: string;
    slots: [string, string, string, string, string];
    referralCount: bigint;
    gambleCountToday: bigint;
    gambleUsed: boolean;
    equippedCar: boolean;
    gameStarted: boolean;
  };
}

export interface TorqueDriftGameInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "DEFAULT_TIMELOCK_DURATION"
      | "MIN_CLAIM_COOLDOWN"
      | "PENALTY_1H_BURN_BPS"
      | "PENALTY_1H_SOL"
      | "PENALTY_2H_BURN_BPS"
      | "PENALTY_2H_SOL"
      | "PENALTY_3H_BURN_BPS"
      | "PENALTY_3H_SOL"
      | "PENALTY_4H_BURN_BPS"
      | "PENALTY_4H_SOL"
      | "REFERRAL_BOOST_DURATION"
      | "SECONDS_PER_DAY"
      | "SECONDS_PER_HOUR"
      | "activateClaimLock"
      | "advancedContract"
      | "calculateMaintenanceCost"
      | "calculateTotalReward(uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256)"
      | "calculateTotalReward(address,uint256,uint256)"
      | "carsContract"
      | "claimTokens"
      | "createAdditionalCar"
      | "deactivateClaimLock"
      | "emergencyRescueTokens"
      | "equipCar"
      | "equippedCars"
      | "getCarEfficiencyInfo"
      | "getContractVersion"
      | "getGlobalState"
      | "getReferralInfo"
      | "getUserCars"
      | "getUserEquippedCar"
      | "getUserEquippedCars"
      | "getUserGameStarted"
      | "getUserHashPower"
      | "getUserInfo"
      | "getUserLastClaim"
      | "getUserReferralCount"
      | "getUserReferrer"
      | "getUserState"
      | "getUserTotalClaimed"
      | "getUserTotalEarned"
      | "globalState"
      | "hasActiveClaimLock"
      | "initializeStartGame(address)"
      | "initializeStartGame(string)"
      | "owner"
      | "payMaintenance"
      | "performMaintenance"
      | "previewClaim"
      | "referralContract"
      | "resetExpiredBoosts"
      | "resumeEmergencyPause"
      | "setAdvancedContract"
      | "setBaseRate"
      | "setCarsContract"
      | "setReferralContract"
      | "setTokenContract"
      | "syncUserState"
      | "toggleCircuitBreaker"
      | "toggleMinting"
      | "tokenContract"
      | "totalMinted"
      | "totalTokensClaimed"
      | "totalUsers"
      | "treasuryWallet"
      | "triggerEmergencyPause"
      | "unequipCar"
      | "updateTokenMint"
      | "userStates"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "AdvancedContractUpdated"
      | "BnbPenaltyUpdated"
      | "BurnPenaltyUpdated"
      | "CarCreated"
      | "CarEquipped"
      | "CarMaintenance"
      | "CarUnequipped"
      | "CircuitBreakerToggled"
      | "ClaimLockActivated"
      | "ClaimLockDeactivated"
      | "ClockDriftToleranceUpdated"
      | "EmergencyPauseResumed"
      | "EmergencyPauseTriggered"
      | "GameStarted"
      | "HalvingTriggered"
      | "MinClaimCooldownUpdated"
      | "ReferralApplied"
      | "ReferralBoostDurationUpdated"
      | "TokensClaimed"
      | "TreasuryWalletUpdated"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "DEFAULT_TIMELOCK_DURATION",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MIN_CLAIM_COOLDOWN",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "PENALTY_1H_BURN_BPS",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "PENALTY_1H_SOL",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "PENALTY_2H_BURN_BPS",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "PENALTY_2H_SOL",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "PENALTY_3H_BURN_BPS",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "PENALTY_3H_SOL",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "PENALTY_4H_BURN_BPS",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "PENALTY_4H_SOL",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "REFERRAL_BOOST_DURATION",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "SECONDS_PER_DAY",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "SECONDS_PER_HOUR",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "activateClaimLock",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "advancedContract",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "calculateMaintenanceCost",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "calculateTotalReward(uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256)",
    values: [
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "calculateTotalReward(address,uint256,uint256)",
    values: [AddressLike, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "carsContract",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "claimTokens",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "createAdditionalCar",
    values: [AddressLike, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "deactivateClaimLock",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "emergencyRescueTokens",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "equipCar",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "equippedCars",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getCarEfficiencyInfo",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getContractVersion",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getGlobalState",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getReferralInfo",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getUserCars",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getUserEquippedCar",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getUserEquippedCars",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getUserGameStarted",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getUserHashPower",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getUserInfo",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getUserLastClaim",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getUserReferralCount",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getUserReferrer",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getUserState",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getUserTotalClaimed",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getUserTotalEarned",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "globalState",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "hasActiveClaimLock",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "initializeStartGame(address)",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "initializeStartGame(string)",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "payMaintenance",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "performMaintenance",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "previewClaim",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "referralContract",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "resetExpiredBoosts",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "resumeEmergencyPause",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setAdvancedContract",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setBaseRate",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setCarsContract",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setReferralContract",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setTokenContract",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "syncUserState",
    values: [AddressLike, ITorqueDriftStructs.UserStateStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "toggleCircuitBreaker",
    values: [BigNumberish, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "toggleMinting",
    values: [boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "tokenContract",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalMinted",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalTokensClaimed",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalUsers",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "treasuryWallet",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "triggerEmergencyPause",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "unequipCar",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "updateTokenMint",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "userStates",
    values: [AddressLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "DEFAULT_TIMELOCK_DURATION",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "MIN_CLAIM_COOLDOWN",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "PENALTY_1H_BURN_BPS",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "PENALTY_1H_SOL",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "PENALTY_2H_BURN_BPS",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "PENALTY_2H_SOL",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "PENALTY_3H_BURN_BPS",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "PENALTY_3H_SOL",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "PENALTY_4H_BURN_BPS",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "PENALTY_4H_SOL",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "REFERRAL_BOOST_DURATION",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "SECONDS_PER_DAY",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "SECONDS_PER_HOUR",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "activateClaimLock",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "advancedContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "calculateMaintenanceCost",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "calculateTotalReward(uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "calculateTotalReward(address,uint256,uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "carsContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "claimTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createAdditionalCar",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "deactivateClaimLock",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "emergencyRescueTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "equipCar", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "equippedCars",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCarEfficiencyInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getContractVersion",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getGlobalState",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getReferralInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUserCars",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUserEquippedCar",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUserEquippedCars",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUserGameStarted",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUserHashPower",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUserInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUserLastClaim",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUserReferralCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUserReferrer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUserState",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUserTotalClaimed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUserTotalEarned",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "globalState",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "hasActiveClaimLock",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "initializeStartGame(address)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "initializeStartGame(string)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "payMaintenance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "performMaintenance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "previewClaim",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "referralContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "resetExpiredBoosts",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "resumeEmergencyPause",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setAdvancedContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setBaseRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setCarsContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setReferralContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setTokenContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "syncUserState",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "toggleCircuitBreaker",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "toggleMinting",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tokenContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalMinted",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalTokensClaimed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "totalUsers", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "treasuryWallet",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "triggerEmergencyPause",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "unequipCar", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "updateTokenMint",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "userStates", data: BytesLike): Result;
}

export namespace AdvancedContractUpdatedEvent {
  export type InputTuple = [advancedContract: AddressLike];
  export type OutputTuple = [advancedContract: string];
  export interface OutputObject {
    advancedContract: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace BnbPenaltyUpdatedEvent {
  export type InputTuple = [
    penaltyType: string,
    oldAmount: BigNumberish,
    newAmount: BigNumberish
  ];
  export type OutputTuple = [
    penaltyType: string,
    oldAmount: bigint,
    newAmount: bigint
  ];
  export interface OutputObject {
    penaltyType: string;
    oldAmount: bigint;
    newAmount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace BurnPenaltyUpdatedEvent {
  export type InputTuple = [
    penaltyType: string,
    oldBps: BigNumberish,
    newBps: BigNumberish
  ];
  export type OutputTuple = [
    penaltyType: string,
    oldBps: bigint,
    newBps: bigint
  ];
  export interface OutputObject {
    penaltyType: string;
    oldBps: bigint;
    newBps: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace CarCreatedEvent {
  export type InputTuple = [
    user: AddressLike,
    carId: BigNumberish,
    rarity: BigNumberish,
    version: BigNumberish,
    hashPower: BigNumberish,
    timestamp: BigNumberish
  ];
  export type OutputTuple = [
    user: string,
    carId: bigint,
    rarity: bigint,
    version: bigint,
    hashPower: bigint,
    timestamp: bigint
  ];
  export interface OutputObject {
    user: string;
    carId: bigint;
    rarity: bigint;
    version: bigint;
    hashPower: bigint;
    timestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace CarEquippedEvent {
  export type InputTuple = [
    user: AddressLike,
    carAddress: AddressLike,
    hashPower: BigNumberish,
    slotIndex: BigNumberish
  ];
  export type OutputTuple = [
    user: string,
    carAddress: string,
    hashPower: bigint,
    slotIndex: bigint
  ];
  export interface OutputObject {
    user: string;
    carAddress: string;
    hashPower: bigint;
    slotIndex: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace CarMaintenanceEvent {
  export type InputTuple = [
    user: AddressLike,
    carAddress: AddressLike,
    maintenanceCost: BigNumberish,
    oldEfficiency: BigNumberish,
    newEfficiency: BigNumberish,
    timestamp: BigNumberish
  ];
  export type OutputTuple = [
    user: string,
    carAddress: string,
    maintenanceCost: bigint,
    oldEfficiency: bigint,
    newEfficiency: bigint,
    timestamp: bigint
  ];
  export interface OutputObject {
    user: string;
    carAddress: string;
    maintenanceCost: bigint;
    oldEfficiency: bigint;
    newEfficiency: bigint;
    timestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace CarUnequippedEvent {
  export type InputTuple = [
    user: AddressLike,
    carAddress: AddressLike,
    slotIndex: BigNumberish
  ];
  export type OutputTuple = [
    user: string,
    carAddress: string,
    slotIndex: bigint
  ];
  export interface OutputObject {
    user: string;
    carAddress: string;
    slotIndex: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace CircuitBreakerToggledEvent {
  export type InputTuple = [
    admin: AddressLike,
    breakerType: BigNumberish,
    paused: boolean
  ];
  export type OutputTuple = [
    admin: string,
    breakerType: bigint,
    paused: boolean
  ];
  export interface OutputObject {
    admin: string;
    breakerType: bigint;
    paused: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ClaimLockActivatedEvent {
  export type InputTuple = [
    user: AddressLike,
    lockOption: BigNumberish,
    unlockTime: BigNumberish,
    boostPercent: BigNumberish
  ];
  export type OutputTuple = [
    user: string,
    lockOption: bigint,
    unlockTime: bigint,
    boostPercent: bigint
  ];
  export interface OutputObject {
    user: string;
    lockOption: bigint;
    unlockTime: bigint;
    boostPercent: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ClaimLockDeactivatedEvent {
  export type InputTuple = [user: AddressLike];
  export type OutputTuple = [user: string];
  export interface OutputObject {
    user: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ClockDriftToleranceUpdatedEvent {
  export type InputTuple = [oldValue: BigNumberish, newValue: BigNumberish];
  export type OutputTuple = [oldValue: bigint, newValue: bigint];
  export interface OutputObject {
    oldValue: bigint;
    newValue: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace EmergencyPauseResumedEvent {
  export type InputTuple = [admin: AddressLike, timestamp: BigNumberish];
  export type OutputTuple = [admin: string, timestamp: bigint];
  export interface OutputObject {
    admin: string;
    timestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace EmergencyPauseTriggeredEvent {
  export type InputTuple = [
    admin: AddressLike,
    reason: string,
    timestamp: BigNumberish
  ];
  export type OutputTuple = [admin: string, reason: string, timestamp: bigint];
  export interface OutputObject {
    admin: string;
    reason: string;
    timestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace GameStartedEvent {
  export type InputTuple = [
    user: AddressLike,
    bnbPaid: BigNumberish,
    starterCar: AddressLike,
    timestamp: BigNumberish
  ];
  export type OutputTuple = [
    user: string,
    bnbPaid: bigint,
    starterCar: string,
    timestamp: bigint
  ];
  export interface OutputObject {
    user: string;
    bnbPaid: bigint;
    starterCar: string;
    timestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace HalvingTriggeredEvent {
  export type InputTuple = [
    halvingCount: BigNumberish,
    newBaseRate: BigNumberish,
    nextHalvingThreshold: BigNumberish,
    timestamp: BigNumberish
  ];
  export type OutputTuple = [
    halvingCount: bigint,
    newBaseRate: bigint,
    nextHalvingThreshold: bigint,
    timestamp: bigint
  ];
  export interface OutputObject {
    halvingCount: bigint;
    newBaseRate: bigint;
    nextHalvingThreshold: bigint;
    timestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace MinClaimCooldownUpdatedEvent {
  export type InputTuple = [oldValue: BigNumberish, newValue: BigNumberish];
  export type OutputTuple = [oldValue: bigint, newValue: bigint];
  export interface OutputObject {
    oldValue: bigint;
    newValue: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ReferralAppliedEvent {
  export type InputTuple = [
    referrer: AddressLike,
    referee: AddressLike,
    referrerBoost: BigNumberish,
    refereeDiscount: BigNumberish,
    boostDuration: BigNumberish,
    timestamp: BigNumberish
  ];
  export type OutputTuple = [
    referrer: string,
    referee: string,
    referrerBoost: bigint,
    refereeDiscount: bigint,
    boostDuration: bigint,
    timestamp: bigint
  ];
  export interface OutputObject {
    referrer: string;
    referee: string;
    referrerBoost: bigint;
    refereeDiscount: bigint;
    boostDuration: bigint;
    timestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ReferralBoostDurationUpdatedEvent {
  export type InputTuple = [oldValue: BigNumberish, newValue: BigNumberish];
  export type OutputTuple = [oldValue: bigint, newValue: bigint];
  export interface OutputObject {
    oldValue: bigint;
    newValue: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TokensClaimedEvent {
  export type InputTuple = [
    user: AddressLike,
    amount: BigNumberish,
    timestamp: BigNumberish
  ];
  export type OutputTuple = [user: string, amount: bigint, timestamp: bigint];
  export interface OutputObject {
    user: string;
    amount: bigint;
    timestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TreasuryWalletUpdatedEvent {
  export type InputTuple = [oldWallet: AddressLike, newWallet: AddressLike];
  export type OutputTuple = [oldWallet: string, newWallet: string];
  export interface OutputObject {
    oldWallet: string;
    newWallet: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface TorqueDriftGame extends BaseContract {
  connect(runner?: ContractRunner | null): TorqueDriftGame;
  waitForDeployment(): Promise<this>;

  interface: TorqueDriftGameInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  DEFAULT_TIMELOCK_DURATION: TypedContractMethod<[], [bigint], "view">;

  MIN_CLAIM_COOLDOWN: TypedContractMethod<[], [bigint], "view">;

  PENALTY_1H_BURN_BPS: TypedContractMethod<[], [bigint], "view">;

  PENALTY_1H_SOL: TypedContractMethod<[], [bigint], "view">;

  PENALTY_2H_BURN_BPS: TypedContractMethod<[], [bigint], "view">;

  PENALTY_2H_SOL: TypedContractMethod<[], [bigint], "view">;

  PENALTY_3H_BURN_BPS: TypedContractMethod<[], [bigint], "view">;

  PENALTY_3H_SOL: TypedContractMethod<[], [bigint], "view">;

  PENALTY_4H_BURN_BPS: TypedContractMethod<[], [bigint], "view">;

  PENALTY_4H_SOL: TypedContractMethod<[], [bigint], "view">;

  REFERRAL_BOOST_DURATION: TypedContractMethod<[], [bigint], "view">;

  SECONDS_PER_DAY: TypedContractMethod<[], [bigint], "view">;

  SECONDS_PER_HOUR: TypedContractMethod<[], [bigint], "view">;

  activateClaimLock: TypedContractMethod<
    [lockOption: BigNumberish],
    [void],
    "nonpayable"
  >;

  advancedContract: TypedContractMethod<[], [string], "view">;

  calculateMaintenanceCost: TypedContractMethod<
    [carAddress: AddressLike],
    [[bigint, boolean] & { cost: bigint; canMaintain: boolean }],
    "view"
  >;

  "calculateTotalReward(uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256)": TypedContractMethod<
    [
      effectiveHashPower: BigNumberish,
      lockUnlockTime: BigNumberish,
      lockBoostPercent: BigNumberish,
      referralBoostPercent: BigNumberish,
      referralBoostStartTime: BigNumberish,
      referralBoostDuration: BigNumberish,
      baseRate: BigNumberish,
      elapsedTime: BigNumberish,
      currentTime: BigNumberish
    ],
    [bigint],
    "view"
  >;

  "calculateTotalReward(address,uint256,uint256)": TypedContractMethod<
    [
      user: AddressLike,
      elapsedSeconds: BigNumberish,
      currentTimestamp: BigNumberish
    ],
    [bigint],
    "view"
  >;

  carsContract: TypedContractMethod<[], [string], "view">;

  claimTokens: TypedContractMethod<[], [void], "payable">;

  createAdditionalCar: TypedContractMethod<
    [user: AddressLike, rarity: BigNumberish, version: BigNumberish],
    [void],
    "nonpayable"
  >;

  deactivateClaimLock: TypedContractMethod<[], [void], "nonpayable">;

  emergencyRescueTokens: TypedContractMethod<
    [token: AddressLike, amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  equipCar: TypedContractMethod<
    [carAddress: AddressLike, slotIndex: BigNumberish],
    [void],
    "nonpayable"
  >;

  equippedCars: TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [
      [string, bigint, bigint, bigint, bigint, bigint, bigint] & {
        mint: string;
        hashPower: bigint;
        efficiency: bigint;
        lastMaintenance: bigint;
        rarity: bigint;
        version: bigint;
        slotIndex: bigint;
      }
    ],
    "view"
  >;

  getCarEfficiencyInfo: TypedContractMethod<
    [user: AddressLike, carAddress: AddressLike],
    [
      [bigint, bigint, bigint, bigint, bigint] & {
        currentEfficiency: bigint;
        effectiveHashPower: bigint;
        maintenanceCost: bigint;
        timeUntilNextMaintenance: bigint;
        currentDailyYield: bigint;
      }
    ],
    "view"
  >;

  getContractVersion: TypedContractMethod<[], [string], "view">;

  getGlobalState: TypedContractMethod<
    [],
    [ITorqueDriftStructs.GlobalStateStructOutput],
    "view"
  >;

  getReferralInfo: TypedContractMethod<
    [user: AddressLike],
    [
      [string, bigint, bigint, bigint, bigint, bigint, bigint, bigint] & {
        referrer_: string;
        referralEarnings_: bigint;
        referralEarningsLevel2_: bigint;
        referralCount_: bigint;
        discount_: bigint;
        boostPercent_: bigint;
        boostStartTime_: bigint;
        boostDuration_: bigint;
      }
    ],
    "view"
  >;

  getUserCars: TypedContractMethod<
    [],
    [
      [
        [
          ITorqueDriftStructs.CarInfoStructOutput,
          ITorqueDriftStructs.CarInfoStructOutput,
          ITorqueDriftStructs.CarInfoStructOutput,
          ITorqueDriftStructs.CarInfoStructOutput,
          ITorqueDriftStructs.CarInfoStructOutput
        ],
        bigint,
        bigint
      ] & {
        userEquippedCars: [
          ITorqueDriftStructs.CarInfoStructOutput,
          ITorqueDriftStructs.CarInfoStructOutput,
          ITorqueDriftStructs.CarInfoStructOutput,
          ITorqueDriftStructs.CarInfoStructOutput,
          ITorqueDriftStructs.CarInfoStructOutput
        ];
        totalEquipped: bigint;
        totalHashPower: bigint;
      }
    ],
    "view"
  >;

  getUserEquippedCar: TypedContractMethod<
    [user: AddressLike],
    [boolean],
    "view"
  >;

  getUserEquippedCars: TypedContractMethod<
    [user: AddressLike],
    [
      [
        [
          ITorqueDriftStructs.CarInfoStructOutput,
          ITorqueDriftStructs.CarInfoStructOutput,
          ITorqueDriftStructs.CarInfoStructOutput,
          ITorqueDriftStructs.CarInfoStructOutput,
          ITorqueDriftStructs.CarInfoStructOutput
        ],
        bigint,
        bigint
      ] & {
        userEquippedCars: [
          ITorqueDriftStructs.CarInfoStructOutput,
          ITorqueDriftStructs.CarInfoStructOutput,
          ITorqueDriftStructs.CarInfoStructOutput,
          ITorqueDriftStructs.CarInfoStructOutput,
          ITorqueDriftStructs.CarInfoStructOutput
        ];
        totalEquipped: bigint;
        totalHashPower: bigint;
      }
    ],
    "view"
  >;

  getUserGameStarted: TypedContractMethod<
    [user: AddressLike],
    [boolean],
    "view"
  >;

  getUserHashPower: TypedContractMethod<[user: AddressLike], [bigint], "view">;

  getUserInfo: TypedContractMethod<
    [],
    [
      [boolean, bigint, bigint, bigint, boolean, bigint, bigint] & {
        gameStarted_: boolean;
        totalHashPower: bigint;
        lastClaim: bigint;
        discount: bigint;
        equippedCar: boolean;
        boostPercent: bigint;
        equippedCount: bigint;
      }
    ],
    "view"
  >;

  getUserLastClaim: TypedContractMethod<[user: AddressLike], [bigint], "view">;

  getUserReferralCount: TypedContractMethod<
    [user: AddressLike],
    [bigint],
    "view"
  >;

  getUserReferrer: TypedContractMethod<[user: AddressLike], [string], "view">;

  getUserState: TypedContractMethod<
    [user: AddressLike],
    [ITorqueDriftStructs.UserStateStructOutput],
    "view"
  >;

  getUserTotalClaimed: TypedContractMethod<
    [user: AddressLike],
    [bigint],
    "view"
  >;

  getUserTotalEarned: TypedContractMethod<
    [user: AddressLike],
    [bigint],
    "view"
  >;

  globalState: TypedContractMethod<
    [],
    [
      [
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        string,
        string,
        string,
        string,
        boolean,
        boolean,
        boolean,
        boolean,
        boolean,
        boolean
      ] & {
        totalMinted: bigint;
        maxSupply: bigint;
        baseRate: bigint;
        lastHalving: bigint;
        halvingCount: bigint;
        nextHalvingThreshold: bigint;
        emergencyTimestamp: bigint;
        pendingBaseRate: bigint;
        pendingMaxSupply: bigint;
        timelockExpires: bigint;
        timelockDuration: bigint;
        upgradeProposedAt: bigint;
        totalUsers: bigint;
        totalHashPower: bigint;
        totalTokensClaimed: bigint;
        lastStatsUpdate: bigint;
        admin: string;
        tokenMint: string;
        pendingAdmin: string;
        emergencyReason: string;
        mintingPaused: boolean;
        emergencyPause: boolean;
        claimPaused: boolean;
        equipPaused: boolean;
        gamblePaused: boolean;
        lockPaused: boolean;
      }
    ],
    "view"
  >;

  hasActiveClaimLock: TypedContractMethod<
    [user: AddressLike],
    [boolean],
    "view"
  >;

  "initializeStartGame(address)": TypedContractMethod<
    [referrer: AddressLike],
    [void],
    "payable"
  >;

  "initializeStartGame(string)": TypedContractMethod<
    [referrerCode: string],
    [void],
    "payable"
  >;

  owner: TypedContractMethod<[], [string], "view">;

  payMaintenance: TypedContractMethod<
    [carAddress: AddressLike],
    [void],
    "nonpayable"
  >;

  performMaintenance: TypedContractMethod<
    [carAddress: AddressLike],
    [void],
    "nonpayable"
  >;

  previewClaim: TypedContractMethod<
    [user: AddressLike],
    [
      [bigint, bigint, bigint, bigint] & {
        claimableAmount: bigint;
        baseReward: bigint;
        lockBoost: bigint;
        referralBoost: bigint;
      }
    ],
    "view"
  >;

  referralContract: TypedContractMethod<[], [string], "view">;

  resetExpiredBoosts: TypedContractMethod<[], [void], "nonpayable">;

  resumeEmergencyPause: TypedContractMethod<[], [void], "nonpayable">;

  setAdvancedContract: TypedContractMethod<
    [_advancedContract: AddressLike],
    [void],
    "nonpayable"
  >;

  setBaseRate: TypedContractMethod<
    [newRate: BigNumberish],
    [void],
    "nonpayable"
  >;

  setCarsContract: TypedContractMethod<
    [_carsContract: AddressLike],
    [void],
    "nonpayable"
  >;

  setReferralContract: TypedContractMethod<
    [_referralContract: AddressLike],
    [void],
    "nonpayable"
  >;

  setTokenContract: TypedContractMethod<
    [_tokenContract: AddressLike],
    [void],
    "nonpayable"
  >;

  syncUserState: TypedContractMethod<
    [user: AddressLike, newState: ITorqueDriftStructs.UserStateStruct],
    [void],
    "nonpayable"
  >;

  toggleCircuitBreaker: TypedContractMethod<
    [breakerType: BigNumberish, pause: boolean],
    [void],
    "nonpayable"
  >;

  toggleMinting: TypedContractMethod<[pause: boolean], [void], "nonpayable">;

  tokenContract: TypedContractMethod<[], [string], "view">;

  totalMinted: TypedContractMethod<[], [bigint], "view">;

  totalTokensClaimed: TypedContractMethod<[], [bigint], "view">;

  totalUsers: TypedContractMethod<[], [bigint], "view">;

  treasuryWallet: TypedContractMethod<[], [string], "view">;

  triggerEmergencyPause: TypedContractMethod<
    [reason: string],
    [void],
    "nonpayable"
  >;

  unequipCar: TypedContractMethod<
    [carAddress: AddressLike, slotIndex: BigNumberish],
    [void],
    "nonpayable"
  >;

  updateTokenMint: TypedContractMethod<
    [newTokenMint: AddressLike],
    [void],
    "nonpayable"
  >;

  userStates: TypedContractMethod<
    [arg0: AddressLike],
    [
      [
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        ITorqueDriftStructs.LockInfoStructOutput,
        string,
        string,
        bigint,
        bigint,
        boolean,
        boolean,
        boolean
      ] & {
        lastClaim: bigint;
        totalHashPower: bigint;
        discount: bigint;
        boostPercent: bigint;
        boostStartTime: bigint;
        boostDuration: bigint;
        lastGambleTime: bigint;
        lastGambleDay: bigint;
        lastLockTime: bigint;
        totalClaimed: bigint;
        referralEarnings: bigint;
        referralEarningsLevel2: bigint;
        cachedEffectiveHashPower: bigint;
        lastEffectiveHashPowerUpdate: bigint;
        lock: ITorqueDriftStructs.LockInfoStructOutput;
        referrer: string;
        referrerLevel2: string;
        referralCount: bigint;
        gambleCountToday: bigint;
        gambleUsed: boolean;
        equippedCar: boolean;
        gameStarted: boolean;
      }
    ],
    "view"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "DEFAULT_TIMELOCK_DURATION"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "MIN_CLAIM_COOLDOWN"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "PENALTY_1H_BURN_BPS"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "PENALTY_1H_SOL"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "PENALTY_2H_BURN_BPS"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "PENALTY_2H_SOL"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "PENALTY_3H_BURN_BPS"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "PENALTY_3H_SOL"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "PENALTY_4H_BURN_BPS"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "PENALTY_4H_SOL"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "REFERRAL_BOOST_DURATION"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "SECONDS_PER_DAY"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "SECONDS_PER_HOUR"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "activateClaimLock"
  ): TypedContractMethod<[lockOption: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "advancedContract"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "calculateMaintenanceCost"
  ): TypedContractMethod<
    [carAddress: AddressLike],
    [[bigint, boolean] & { cost: bigint; canMaintain: boolean }],
    "view"
  >;
  getFunction(
    nameOrSignature: "calculateTotalReward(uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256)"
  ): TypedContractMethod<
    [
      effectiveHashPower: BigNumberish,
      lockUnlockTime: BigNumberish,
      lockBoostPercent: BigNumberish,
      referralBoostPercent: BigNumberish,
      referralBoostStartTime: BigNumberish,
      referralBoostDuration: BigNumberish,
      baseRate: BigNumberish,
      elapsedTime: BigNumberish,
      currentTime: BigNumberish
    ],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "calculateTotalReward(address,uint256,uint256)"
  ): TypedContractMethod<
    [
      user: AddressLike,
      elapsedSeconds: BigNumberish,
      currentTimestamp: BigNumberish
    ],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "carsContract"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "claimTokens"
  ): TypedContractMethod<[], [void], "payable">;
  getFunction(
    nameOrSignature: "createAdditionalCar"
  ): TypedContractMethod<
    [user: AddressLike, rarity: BigNumberish, version: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "deactivateClaimLock"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "emergencyRescueTokens"
  ): TypedContractMethod<
    [token: AddressLike, amount: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "equipCar"
  ): TypedContractMethod<
    [carAddress: AddressLike, slotIndex: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "equippedCars"
  ): TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [
      [string, bigint, bigint, bigint, bigint, bigint, bigint] & {
        mint: string;
        hashPower: bigint;
        efficiency: bigint;
        lastMaintenance: bigint;
        rarity: bigint;
        version: bigint;
        slotIndex: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "getCarEfficiencyInfo"
  ): TypedContractMethod<
    [user: AddressLike, carAddress: AddressLike],
    [
      [bigint, bigint, bigint, bigint, bigint] & {
        currentEfficiency: bigint;
        effectiveHashPower: bigint;
        maintenanceCost: bigint;
        timeUntilNextMaintenance: bigint;
        currentDailyYield: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "getContractVersion"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "getGlobalState"
  ): TypedContractMethod<
    [],
    [ITorqueDriftStructs.GlobalStateStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getReferralInfo"
  ): TypedContractMethod<
    [user: AddressLike],
    [
      [string, bigint, bigint, bigint, bigint, bigint, bigint, bigint] & {
        referrer_: string;
        referralEarnings_: bigint;
        referralEarningsLevel2_: bigint;
        referralCount_: bigint;
        discount_: bigint;
        boostPercent_: bigint;
        boostStartTime_: bigint;
        boostDuration_: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "getUserCars"
  ): TypedContractMethod<
    [],
    [
      [
        [
          ITorqueDriftStructs.CarInfoStructOutput,
          ITorqueDriftStructs.CarInfoStructOutput,
          ITorqueDriftStructs.CarInfoStructOutput,
          ITorqueDriftStructs.CarInfoStructOutput,
          ITorqueDriftStructs.CarInfoStructOutput
        ],
        bigint,
        bigint
      ] & {
        userEquippedCars: [
          ITorqueDriftStructs.CarInfoStructOutput,
          ITorqueDriftStructs.CarInfoStructOutput,
          ITorqueDriftStructs.CarInfoStructOutput,
          ITorqueDriftStructs.CarInfoStructOutput,
          ITorqueDriftStructs.CarInfoStructOutput
        ];
        totalEquipped: bigint;
        totalHashPower: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "getUserEquippedCar"
  ): TypedContractMethod<[user: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "getUserEquippedCars"
  ): TypedContractMethod<
    [user: AddressLike],
    [
      [
        [
          ITorqueDriftStructs.CarInfoStructOutput,
          ITorqueDriftStructs.CarInfoStructOutput,
          ITorqueDriftStructs.CarInfoStructOutput,
          ITorqueDriftStructs.CarInfoStructOutput,
          ITorqueDriftStructs.CarInfoStructOutput
        ],
        bigint,
        bigint
      ] & {
        userEquippedCars: [
          ITorqueDriftStructs.CarInfoStructOutput,
          ITorqueDriftStructs.CarInfoStructOutput,
          ITorqueDriftStructs.CarInfoStructOutput,
          ITorqueDriftStructs.CarInfoStructOutput,
          ITorqueDriftStructs.CarInfoStructOutput
        ];
        totalEquipped: bigint;
        totalHashPower: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "getUserGameStarted"
  ): TypedContractMethod<[user: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "getUserHashPower"
  ): TypedContractMethod<[user: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "getUserInfo"
  ): TypedContractMethod<
    [],
    [
      [boolean, bigint, bigint, bigint, boolean, bigint, bigint] & {
        gameStarted_: boolean;
        totalHashPower: bigint;
        lastClaim: bigint;
        discount: bigint;
        equippedCar: boolean;
        boostPercent: bigint;
        equippedCount: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "getUserLastClaim"
  ): TypedContractMethod<[user: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "getUserReferralCount"
  ): TypedContractMethod<[user: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "getUserReferrer"
  ): TypedContractMethod<[user: AddressLike], [string], "view">;
  getFunction(
    nameOrSignature: "getUserState"
  ): TypedContractMethod<
    [user: AddressLike],
    [ITorqueDriftStructs.UserStateStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getUserTotalClaimed"
  ): TypedContractMethod<[user: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "getUserTotalEarned"
  ): TypedContractMethod<[user: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "globalState"
  ): TypedContractMethod<
    [],
    [
      [
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        string,
        string,
        string,
        string,
        boolean,
        boolean,
        boolean,
        boolean,
        boolean,
        boolean
      ] & {
        totalMinted: bigint;
        maxSupply: bigint;
        baseRate: bigint;
        lastHalving: bigint;
        halvingCount: bigint;
        nextHalvingThreshold: bigint;
        emergencyTimestamp: bigint;
        pendingBaseRate: bigint;
        pendingMaxSupply: bigint;
        timelockExpires: bigint;
        timelockDuration: bigint;
        upgradeProposedAt: bigint;
        totalUsers: bigint;
        totalHashPower: bigint;
        totalTokensClaimed: bigint;
        lastStatsUpdate: bigint;
        admin: string;
        tokenMint: string;
        pendingAdmin: string;
        emergencyReason: string;
        mintingPaused: boolean;
        emergencyPause: boolean;
        claimPaused: boolean;
        equipPaused: boolean;
        gamblePaused: boolean;
        lockPaused: boolean;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "hasActiveClaimLock"
  ): TypedContractMethod<[user: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "initializeStartGame(address)"
  ): TypedContractMethod<[referrer: AddressLike], [void], "payable">;
  getFunction(
    nameOrSignature: "initializeStartGame(string)"
  ): TypedContractMethod<[referrerCode: string], [void], "payable">;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "payMaintenance"
  ): TypedContractMethod<[carAddress: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "performMaintenance"
  ): TypedContractMethod<[carAddress: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "previewClaim"
  ): TypedContractMethod<
    [user: AddressLike],
    [
      [bigint, bigint, bigint, bigint] & {
        claimableAmount: bigint;
        baseReward: bigint;
        lockBoost: bigint;
        referralBoost: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "referralContract"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "resetExpiredBoosts"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "resumeEmergencyPause"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setAdvancedContract"
  ): TypedContractMethod<
    [_advancedContract: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setBaseRate"
  ): TypedContractMethod<[newRate: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setCarsContract"
  ): TypedContractMethod<[_carsContract: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setReferralContract"
  ): TypedContractMethod<
    [_referralContract: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setTokenContract"
  ): TypedContractMethod<[_tokenContract: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "syncUserState"
  ): TypedContractMethod<
    [user: AddressLike, newState: ITorqueDriftStructs.UserStateStruct],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "toggleCircuitBreaker"
  ): TypedContractMethod<
    [breakerType: BigNumberish, pause: boolean],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "toggleMinting"
  ): TypedContractMethod<[pause: boolean], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "tokenContract"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "totalMinted"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "totalTokensClaimed"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "totalUsers"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "treasuryWallet"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "triggerEmergencyPause"
  ): TypedContractMethod<[reason: string], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "unequipCar"
  ): TypedContractMethod<
    [carAddress: AddressLike, slotIndex: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "updateTokenMint"
  ): TypedContractMethod<[newTokenMint: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "userStates"
  ): TypedContractMethod<
    [arg0: AddressLike],
    [
      [
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        ITorqueDriftStructs.LockInfoStructOutput,
        string,
        string,
        bigint,
        bigint,
        boolean,
        boolean,
        boolean
      ] & {
        lastClaim: bigint;
        totalHashPower: bigint;
        discount: bigint;
        boostPercent: bigint;
        boostStartTime: bigint;
        boostDuration: bigint;
        lastGambleTime: bigint;
        lastGambleDay: bigint;
        lastLockTime: bigint;
        totalClaimed: bigint;
        referralEarnings: bigint;
        referralEarningsLevel2: bigint;
        cachedEffectiveHashPower: bigint;
        lastEffectiveHashPowerUpdate: bigint;
        lock: ITorqueDriftStructs.LockInfoStructOutput;
        referrer: string;
        referrerLevel2: string;
        referralCount: bigint;
        gambleCountToday: bigint;
        gambleUsed: boolean;
        equippedCar: boolean;
        gameStarted: boolean;
      }
    ],
    "view"
  >;

  getEvent(
    key: "AdvancedContractUpdated"
  ): TypedContractEvent<
    AdvancedContractUpdatedEvent.InputTuple,
    AdvancedContractUpdatedEvent.OutputTuple,
    AdvancedContractUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "BnbPenaltyUpdated"
  ): TypedContractEvent<
    BnbPenaltyUpdatedEvent.InputTuple,
    BnbPenaltyUpdatedEvent.OutputTuple,
    BnbPenaltyUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "BurnPenaltyUpdated"
  ): TypedContractEvent<
    BurnPenaltyUpdatedEvent.InputTuple,
    BurnPenaltyUpdatedEvent.OutputTuple,
    BurnPenaltyUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "CarCreated"
  ): TypedContractEvent<
    CarCreatedEvent.InputTuple,
    CarCreatedEvent.OutputTuple,
    CarCreatedEvent.OutputObject
  >;
  getEvent(
    key: "CarEquipped"
  ): TypedContractEvent<
    CarEquippedEvent.InputTuple,
    CarEquippedEvent.OutputTuple,
    CarEquippedEvent.OutputObject
  >;
  getEvent(
    key: "CarMaintenance"
  ): TypedContractEvent<
    CarMaintenanceEvent.InputTuple,
    CarMaintenanceEvent.OutputTuple,
    CarMaintenanceEvent.OutputObject
  >;
  getEvent(
    key: "CarUnequipped"
  ): TypedContractEvent<
    CarUnequippedEvent.InputTuple,
    CarUnequippedEvent.OutputTuple,
    CarUnequippedEvent.OutputObject
  >;
  getEvent(
    key: "CircuitBreakerToggled"
  ): TypedContractEvent<
    CircuitBreakerToggledEvent.InputTuple,
    CircuitBreakerToggledEvent.OutputTuple,
    CircuitBreakerToggledEvent.OutputObject
  >;
  getEvent(
    key: "ClaimLockActivated"
  ): TypedContractEvent<
    ClaimLockActivatedEvent.InputTuple,
    ClaimLockActivatedEvent.OutputTuple,
    ClaimLockActivatedEvent.OutputObject
  >;
  getEvent(
    key: "ClaimLockDeactivated"
  ): TypedContractEvent<
    ClaimLockDeactivatedEvent.InputTuple,
    ClaimLockDeactivatedEvent.OutputTuple,
    ClaimLockDeactivatedEvent.OutputObject
  >;
  getEvent(
    key: "ClockDriftToleranceUpdated"
  ): TypedContractEvent<
    ClockDriftToleranceUpdatedEvent.InputTuple,
    ClockDriftToleranceUpdatedEvent.OutputTuple,
    ClockDriftToleranceUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "EmergencyPauseResumed"
  ): TypedContractEvent<
    EmergencyPauseResumedEvent.InputTuple,
    EmergencyPauseResumedEvent.OutputTuple,
    EmergencyPauseResumedEvent.OutputObject
  >;
  getEvent(
    key: "EmergencyPauseTriggered"
  ): TypedContractEvent<
    EmergencyPauseTriggeredEvent.InputTuple,
    EmergencyPauseTriggeredEvent.OutputTuple,
    EmergencyPauseTriggeredEvent.OutputObject
  >;
  getEvent(
    key: "GameStarted"
  ): TypedContractEvent<
    GameStartedEvent.InputTuple,
    GameStartedEvent.OutputTuple,
    GameStartedEvent.OutputObject
  >;
  getEvent(
    key: "HalvingTriggered"
  ): TypedContractEvent<
    HalvingTriggeredEvent.InputTuple,
    HalvingTriggeredEvent.OutputTuple,
    HalvingTriggeredEvent.OutputObject
  >;
  getEvent(
    key: "MinClaimCooldownUpdated"
  ): TypedContractEvent<
    MinClaimCooldownUpdatedEvent.InputTuple,
    MinClaimCooldownUpdatedEvent.OutputTuple,
    MinClaimCooldownUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "ReferralApplied"
  ): TypedContractEvent<
    ReferralAppliedEvent.InputTuple,
    ReferralAppliedEvent.OutputTuple,
    ReferralAppliedEvent.OutputObject
  >;
  getEvent(
    key: "ReferralBoostDurationUpdated"
  ): TypedContractEvent<
    ReferralBoostDurationUpdatedEvent.InputTuple,
    ReferralBoostDurationUpdatedEvent.OutputTuple,
    ReferralBoostDurationUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "TokensClaimed"
  ): TypedContractEvent<
    TokensClaimedEvent.InputTuple,
    TokensClaimedEvent.OutputTuple,
    TokensClaimedEvent.OutputObject
  >;
  getEvent(
    key: "TreasuryWalletUpdated"
  ): TypedContractEvent<
    TreasuryWalletUpdatedEvent.InputTuple,
    TreasuryWalletUpdatedEvent.OutputTuple,
    TreasuryWalletUpdatedEvent.OutputObject
  >;

  filters: {
    "AdvancedContractUpdated(address)": TypedContractEvent<
      AdvancedContractUpdatedEvent.InputTuple,
      AdvancedContractUpdatedEvent.OutputTuple,
      AdvancedContractUpdatedEvent.OutputObject
    >;
    AdvancedContractUpdated: TypedContractEvent<
      AdvancedContractUpdatedEvent.InputTuple,
      AdvancedContractUpdatedEvent.OutputTuple,
      AdvancedContractUpdatedEvent.OutputObject
    >;

    "BnbPenaltyUpdated(string,uint256,uint256)": TypedContractEvent<
      BnbPenaltyUpdatedEvent.InputTuple,
      BnbPenaltyUpdatedEvent.OutputTuple,
      BnbPenaltyUpdatedEvent.OutputObject
    >;
    BnbPenaltyUpdated: TypedContractEvent<
      BnbPenaltyUpdatedEvent.InputTuple,
      BnbPenaltyUpdatedEvent.OutputTuple,
      BnbPenaltyUpdatedEvent.OutputObject
    >;

    "BurnPenaltyUpdated(string,uint256,uint256)": TypedContractEvent<
      BurnPenaltyUpdatedEvent.InputTuple,
      BurnPenaltyUpdatedEvent.OutputTuple,
      BurnPenaltyUpdatedEvent.OutputObject
    >;
    BurnPenaltyUpdated: TypedContractEvent<
      BurnPenaltyUpdatedEvent.InputTuple,
      BurnPenaltyUpdatedEvent.OutputTuple,
      BurnPenaltyUpdatedEvent.OutputObject
    >;

    "CarCreated(address,uint256,uint8,uint8,uint256,uint256)": TypedContractEvent<
      CarCreatedEvent.InputTuple,
      CarCreatedEvent.OutputTuple,
      CarCreatedEvent.OutputObject
    >;
    CarCreated: TypedContractEvent<
      CarCreatedEvent.InputTuple,
      CarCreatedEvent.OutputTuple,
      CarCreatedEvent.OutputObject
    >;

    "CarEquipped(address,address,uint256,uint8)": TypedContractEvent<
      CarEquippedEvent.InputTuple,
      CarEquippedEvent.OutputTuple,
      CarEquippedEvent.OutputObject
    >;
    CarEquipped: TypedContractEvent<
      CarEquippedEvent.InputTuple,
      CarEquippedEvent.OutputTuple,
      CarEquippedEvent.OutputObject
    >;

    "CarMaintenance(address,address,uint256,uint256,uint256,uint256)": TypedContractEvent<
      CarMaintenanceEvent.InputTuple,
      CarMaintenanceEvent.OutputTuple,
      CarMaintenanceEvent.OutputObject
    >;
    CarMaintenance: TypedContractEvent<
      CarMaintenanceEvent.InputTuple,
      CarMaintenanceEvent.OutputTuple,
      CarMaintenanceEvent.OutputObject
    >;

    "CarUnequipped(address,address,uint8)": TypedContractEvent<
      CarUnequippedEvent.InputTuple,
      CarUnequippedEvent.OutputTuple,
      CarUnequippedEvent.OutputObject
    >;
    CarUnequipped: TypedContractEvent<
      CarUnequippedEvent.InputTuple,
      CarUnequippedEvent.OutputTuple,
      CarUnequippedEvent.OutputObject
    >;

    "CircuitBreakerToggled(address,uint8,bool)": TypedContractEvent<
      CircuitBreakerToggledEvent.InputTuple,
      CircuitBreakerToggledEvent.OutputTuple,
      CircuitBreakerToggledEvent.OutputObject
    >;
    CircuitBreakerToggled: TypedContractEvent<
      CircuitBreakerToggledEvent.InputTuple,
      CircuitBreakerToggledEvent.OutputTuple,
      CircuitBreakerToggledEvent.OutputObject
    >;

    "ClaimLockActivated(address,uint8,uint256,uint256)": TypedContractEvent<
      ClaimLockActivatedEvent.InputTuple,
      ClaimLockActivatedEvent.OutputTuple,
      ClaimLockActivatedEvent.OutputObject
    >;
    ClaimLockActivated: TypedContractEvent<
      ClaimLockActivatedEvent.InputTuple,
      ClaimLockActivatedEvent.OutputTuple,
      ClaimLockActivatedEvent.OutputObject
    >;

    "ClaimLockDeactivated(address)": TypedContractEvent<
      ClaimLockDeactivatedEvent.InputTuple,
      ClaimLockDeactivatedEvent.OutputTuple,
      ClaimLockDeactivatedEvent.OutputObject
    >;
    ClaimLockDeactivated: TypedContractEvent<
      ClaimLockDeactivatedEvent.InputTuple,
      ClaimLockDeactivatedEvent.OutputTuple,
      ClaimLockDeactivatedEvent.OutputObject
    >;

    "ClockDriftToleranceUpdated(uint256,uint256)": TypedContractEvent<
      ClockDriftToleranceUpdatedEvent.InputTuple,
      ClockDriftToleranceUpdatedEvent.OutputTuple,
      ClockDriftToleranceUpdatedEvent.OutputObject
    >;
    ClockDriftToleranceUpdated: TypedContractEvent<
      ClockDriftToleranceUpdatedEvent.InputTuple,
      ClockDriftToleranceUpdatedEvent.OutputTuple,
      ClockDriftToleranceUpdatedEvent.OutputObject
    >;

    "EmergencyPauseResumed(address,uint256)": TypedContractEvent<
      EmergencyPauseResumedEvent.InputTuple,
      EmergencyPauseResumedEvent.OutputTuple,
      EmergencyPauseResumedEvent.OutputObject
    >;
    EmergencyPauseResumed: TypedContractEvent<
      EmergencyPauseResumedEvent.InputTuple,
      EmergencyPauseResumedEvent.OutputTuple,
      EmergencyPauseResumedEvent.OutputObject
    >;

    "EmergencyPauseTriggered(address,string,uint256)": TypedContractEvent<
      EmergencyPauseTriggeredEvent.InputTuple,
      EmergencyPauseTriggeredEvent.OutputTuple,
      EmergencyPauseTriggeredEvent.OutputObject
    >;
    EmergencyPauseTriggered: TypedContractEvent<
      EmergencyPauseTriggeredEvent.InputTuple,
      EmergencyPauseTriggeredEvent.OutputTuple,
      EmergencyPauseTriggeredEvent.OutputObject
    >;

    "GameStarted(address,uint256,address,uint256)": TypedContractEvent<
      GameStartedEvent.InputTuple,
      GameStartedEvent.OutputTuple,
      GameStartedEvent.OutputObject
    >;
    GameStarted: TypedContractEvent<
      GameStartedEvent.InputTuple,
      GameStartedEvent.OutputTuple,
      GameStartedEvent.OutputObject
    >;

    "HalvingTriggered(uint256,uint256,uint256,uint256)": TypedContractEvent<
      HalvingTriggeredEvent.InputTuple,
      HalvingTriggeredEvent.OutputTuple,
      HalvingTriggeredEvent.OutputObject
    >;
    HalvingTriggered: TypedContractEvent<
      HalvingTriggeredEvent.InputTuple,
      HalvingTriggeredEvent.OutputTuple,
      HalvingTriggeredEvent.OutputObject
    >;

    "MinClaimCooldownUpdated(uint256,uint256)": TypedContractEvent<
      MinClaimCooldownUpdatedEvent.InputTuple,
      MinClaimCooldownUpdatedEvent.OutputTuple,
      MinClaimCooldownUpdatedEvent.OutputObject
    >;
    MinClaimCooldownUpdated: TypedContractEvent<
      MinClaimCooldownUpdatedEvent.InputTuple,
      MinClaimCooldownUpdatedEvent.OutputTuple,
      MinClaimCooldownUpdatedEvent.OutputObject
    >;

    "ReferralApplied(address,address,uint256,uint256,uint256,uint256)": TypedContractEvent<
      ReferralAppliedEvent.InputTuple,
      ReferralAppliedEvent.OutputTuple,
      ReferralAppliedEvent.OutputObject
    >;
    ReferralApplied: TypedContractEvent<
      ReferralAppliedEvent.InputTuple,
      ReferralAppliedEvent.OutputTuple,
      ReferralAppliedEvent.OutputObject
    >;

    "ReferralBoostDurationUpdated(uint256,uint256)": TypedContractEvent<
      ReferralBoostDurationUpdatedEvent.InputTuple,
      ReferralBoostDurationUpdatedEvent.OutputTuple,
      ReferralBoostDurationUpdatedEvent.OutputObject
    >;
    ReferralBoostDurationUpdated: TypedContractEvent<
      ReferralBoostDurationUpdatedEvent.InputTuple,
      ReferralBoostDurationUpdatedEvent.OutputTuple,
      ReferralBoostDurationUpdatedEvent.OutputObject
    >;

    "TokensClaimed(address,uint256,uint256)": TypedContractEvent<
      TokensClaimedEvent.InputTuple,
      TokensClaimedEvent.OutputTuple,
      TokensClaimedEvent.OutputObject
    >;
    TokensClaimed: TypedContractEvent<
      TokensClaimedEvent.InputTuple,
      TokensClaimedEvent.OutputTuple,
      TokensClaimedEvent.OutputObject
    >;

    "TreasuryWalletUpdated(address,address)": TypedContractEvent<
      TreasuryWalletUpdatedEvent.InputTuple,
      TreasuryWalletUpdatedEvent.OutputTuple,
      TreasuryWalletUpdatedEvent.OutputObject
    >;
    TreasuryWalletUpdated: TypedContractEvent<
      TreasuryWalletUpdatedEvent.InputTuple,
      TreasuryWalletUpdatedEvent.OutputTuple,
      TreasuryWalletUpdatedEvent.OutputObject
    >;
  };
}
