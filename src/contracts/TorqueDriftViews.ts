/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "./common";

export declare namespace ITorqueDriftStructs {
  export type UserRewardProjectionEventStruct = {
    user: AddressLike;
    currentHashPower: BigNumberish;
    baseRate: BigNumberish;
    hourlyReward: BigNumberish;
    dailyReward: BigNumberish;
    weeklyReward: BigNumberish;
    monthlyReward: BigNumberish;
    activeBoosts: string[];
    nextClaimTime: BigNumberish;
    lastClaimTime: BigNumberish;
    totalClaimedAllTime: BigNumberish;
  };

  export type UserRewardProjectionEventStructOutput = [
    user: string,
    currentHashPower: bigint,
    baseRate: bigint,
    hourlyReward: bigint,
    dailyReward: bigint,
    weeklyReward: bigint,
    monthlyReward: bigint,
    activeBoosts: string[],
    nextClaimTime: bigint,
    lastClaimTime: bigint,
    totalClaimedAllTime: bigint
  ] & {
    user: string;
    currentHashPower: bigint;
    baseRate: bigint;
    hourlyReward: bigint;
    dailyReward: bigint;
    weeklyReward: bigint;
    monthlyReward: bigint;
    activeBoosts: string[];
    nextClaimTime: bigint;
    lastClaimTime: bigint;
    totalClaimedAllTime: bigint;
  };

  export type UserInfoEventStruct = {
    user: AddressLike;
    gameStarted: boolean;
    totalHashPower: BigNumberish;
    lastClaim: BigNumberish;
    discount: BigNumberish;
    gambleUsed: boolean;
    equippedCar: boolean;
    boostPercent: BigNumberish;
    boostStartTime: BigNumberish;
    boostDuration: BigNumberish;
    equippedCount: BigNumberish;
    timeUntilNextClaim: BigNumberish;
    hasActiveLock: boolean;
    currentTimestamp: BigNumberish;
  };

  export type UserInfoEventStructOutput = [
    user: string,
    gameStarted: boolean,
    totalHashPower: bigint,
    lastClaim: bigint,
    discount: bigint,
    gambleUsed: boolean,
    equippedCar: boolean,
    boostPercent: bigint,
    boostStartTime: bigint,
    boostDuration: bigint,
    equippedCount: bigint,
    timeUntilNextClaim: bigint,
    hasActiveLock: boolean,
    currentTimestamp: bigint
  ] & {
    user: string;
    gameStarted: boolean;
    totalHashPower: bigint;
    lastClaim: bigint;
    discount: bigint;
    gambleUsed: boolean;
    equippedCar: boolean;
    boostPercent: bigint;
    boostStartTime: bigint;
    boostDuration: bigint;
    equippedCount: bigint;
    timeUntilNextClaim: bigint;
    hasActiveLock: boolean;
    currentTimestamp: bigint;
  };

  export type ClaimPreviewEventStruct = {
    user: AddressLike;
    claimableAmount: BigNumberish;
    baseReward: BigNumberish;
    lockBoost: BigNumberish;
    referralBoost: BigNumberish;
    elapsedSeconds: BigNumberish;
    currentTimestamp: BigNumberish;
  };

  export type ClaimPreviewEventStructOutput = [
    user: string,
    claimableAmount: bigint,
    baseReward: bigint,
    lockBoost: bigint,
    referralBoost: bigint,
    elapsedSeconds: bigint,
    currentTimestamp: bigint
  ] & {
    user: string;
    claimableAmount: bigint;
    baseReward: bigint;
    lockBoost: bigint;
    referralBoost: bigint;
    elapsedSeconds: bigint;
    currentTimestamp: bigint;
  };

  export type GlobalStatsEventStruct = {
    totalMinted: BigNumberish;
    maxSupply: BigNumberish;
    currentBaseRate: BigNumberish;
    halvingCount: BigNumberish;
    nextHalvingThreshold: BigNumberish;
    totalUsers: BigNumberish;
    totalHashPower: BigNumberish;
    averageHashPowerPerUser: BigNumberish;
    currentBlockTime: BigNumberish;
    timeUntilNextHalving: BigNumberish;
    circulatingSupplyPercent: BigNumberish;
  };

  export type GlobalStatsEventStructOutput = [
    totalMinted: bigint,
    maxSupply: bigint,
    currentBaseRate: bigint,
    halvingCount: bigint,
    nextHalvingThreshold: bigint,
    totalUsers: bigint,
    totalHashPower: bigint,
    averageHashPowerPerUser: bigint,
    currentBlockTime: bigint,
    timeUntilNextHalving: bigint,
    circulatingSupplyPercent: bigint
  ] & {
    totalMinted: bigint;
    maxSupply: bigint;
    currentBaseRate: bigint;
    halvingCount: bigint;
    nextHalvingThreshold: bigint;
    totalUsers: bigint;
    totalHashPower: bigint;
    averageHashPowerPerUser: bigint;
    currentBlockTime: bigint;
    timeUntilNextHalving: bigint;
    circulatingSupplyPercent: bigint;
  };

  export type LeaderboardEntryStruct = {
    user: AddressLike;
    hashPower: BigNumberish;
    totalClaimed: BigNumberish;
    carsOwned: BigNumberish;
    rank: BigNumberish;
  };

  export type LeaderboardEntryStructOutput = [
    user: string,
    hashPower: bigint,
    totalClaimed: bigint,
    carsOwned: bigint,
    rank: bigint
  ] & {
    user: string;
    hashPower: bigint;
    totalClaimed: bigint;
    carsOwned: bigint;
    rank: bigint;
  };

  export type LeaderboardEventStruct = {
    entries: ITorqueDriftStructs.LeaderboardEntryStruct[];
    totalParticipants: BigNumberish;
    lastUpdated: BigNumberish;
  };

  export type LeaderboardEventStructOutput = [
    entries: ITorqueDriftStructs.LeaderboardEntryStructOutput[],
    totalParticipants: bigint,
    lastUpdated: bigint
  ] & {
    entries: ITorqueDriftStructs.LeaderboardEntryStructOutput[];
    totalParticipants: bigint;
    lastUpdated: bigint;
  };

  export type ReferralInfoEventStruct = {
    user: AddressLike;
    referrer: AddressLike;
    referralCount: BigNumberish;
    referralEarnings: BigNumberish;
    hasActiveReferralBoost: boolean;
    currentTimestamp: BigNumberish;
  };

  export type ReferralInfoEventStructOutput = [
    user: string,
    referrer: string,
    referralCount: bigint,
    referralEarnings: bigint,
    hasActiveReferralBoost: boolean,
    currentTimestamp: bigint
  ] & {
    user: string;
    referrer: string;
    referralCount: bigint;
    referralEarnings: bigint;
    hasActiveReferralBoost: boolean;
    currentTimestamp: bigint;
  };

  export type CarInfoStruct = {
    mint: AddressLike;
    hashPower: BigNumberish;
    rarity: BigNumberish;
    version: BigNumberish;
    slotIndex: BigNumberish;
  };

  export type CarInfoStructOutput = [
    mint: string,
    hashPower: bigint,
    rarity: bigint,
    version: bigint,
    slotIndex: bigint
  ] & {
    mint: string;
    hashPower: bigint;
    rarity: bigint;
    version: bigint;
    slotIndex: bigint;
  };

  export type UserCarsEventStruct = {
    user: AddressLike;
    equippedCars: [
      ITorqueDriftStructs.CarInfoStruct,
      ITorqueDriftStructs.CarInfoStruct,
      ITorqueDriftStructs.CarInfoStruct,
      ITorqueDriftStructs.CarInfoStruct,
      ITorqueDriftStructs.CarInfoStruct
    ];
    totalEquipped: BigNumberish;
    totalHashPower: BigNumberish;
  };

  export type UserCarsEventStructOutput = [
    user: string,
    equippedCars: [
      ITorqueDriftStructs.CarInfoStructOutput,
      ITorqueDriftStructs.CarInfoStructOutput,
      ITorqueDriftStructs.CarInfoStructOutput,
      ITorqueDriftStructs.CarInfoStructOutput,
      ITorqueDriftStructs.CarInfoStructOutput
    ],
    totalEquipped: bigint,
    totalHashPower: bigint
  ] & {
    user: string;
    equippedCars: [
      ITorqueDriftStructs.CarInfoStructOutput,
      ITorqueDriftStructs.CarInfoStructOutput,
      ITorqueDriftStructs.CarInfoStructOutput,
      ITorqueDriftStructs.CarInfoStructOutput,
      ITorqueDriftStructs.CarInfoStructOutput
    ];
    totalEquipped: bigint;
    totalHashPower: bigint;
  };

  export type UserInventoryEventStruct = {
    user: AddressLike;
    ownedCars: ITorqueDriftStructs.CarInfoStruct[];
    totalOwned: BigNumberish;
    totalInventoryHashPower: BigNumberish;
    equippedSlots: [
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ];
  };

  export type UserInventoryEventStructOutput = [
    user: string,
    ownedCars: ITorqueDriftStructs.CarInfoStructOutput[],
    totalOwned: bigint,
    totalInventoryHashPower: bigint,
    equippedSlots: [bigint, bigint, bigint, bigint, bigint]
  ] & {
    user: string;
    ownedCars: ITorqueDriftStructs.CarInfoStructOutput[];
    totalOwned: bigint;
    totalInventoryHashPower: bigint;
    equippedSlots: [bigint, bigint, bigint, bigint, bigint];
  };
}

export interface TorqueDriftViewsInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "MIN_CLAIM_COOLDOWN"
      | "SECONDS_PER_DAY"
      | "SECONDS_PER_HOUR"
      | "calculateCurrentDay"
      | "carsContract"
      | "countEquippedSlots"
      | "gameContract"
      | "getBatchRewardProjections"
      | "getBatchUserInfo"
      | "getClaimPreview"
      | "getGlobalStats"
      | "getLeaderboard"
      | "getReferralInfo"
      | "getUserCars"
      | "getUserInfo"
      | "getUserInventory"
      | "getUserRewardProjection"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "MIN_CLAIM_COOLDOWN",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "SECONDS_PER_DAY",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "SECONDS_PER_HOUR",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "calculateCurrentDay",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "carsContract",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "countEquippedSlots",
    values: [[AddressLike, AddressLike, AddressLike, AddressLike, AddressLike]]
  ): string;
  encodeFunctionData(
    functionFragment: "gameContract",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getBatchRewardProjections",
    values: [AddressLike[]]
  ): string;
  encodeFunctionData(
    functionFragment: "getBatchUserInfo",
    values: [AddressLike[]]
  ): string;
  encodeFunctionData(
    functionFragment: "getClaimPreview",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getGlobalStats",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getLeaderboard",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getReferralInfo",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getUserCars",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getUserInfo",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getUserInventory",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getUserRewardProjection",
    values: [AddressLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "MIN_CLAIM_COOLDOWN",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "SECONDS_PER_DAY",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "SECONDS_PER_HOUR",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "calculateCurrentDay",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "carsContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "countEquippedSlots",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "gameContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getBatchRewardProjections",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getBatchUserInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getClaimPreview",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getGlobalStats",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getLeaderboard",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getReferralInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUserCars",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUserInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUserInventory",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUserRewardProjection",
    data: BytesLike
  ): Result;
}

export interface TorqueDriftViews extends BaseContract {
  connect(runner?: ContractRunner | null): TorqueDriftViews;
  waitForDeployment(): Promise<this>;

  interface: TorqueDriftViewsInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  MIN_CLAIM_COOLDOWN: TypedContractMethod<[], [bigint], "view">;

  SECONDS_PER_DAY: TypedContractMethod<[], [bigint], "view">;

  SECONDS_PER_HOUR: TypedContractMethod<[], [bigint], "view">;

  calculateCurrentDay: TypedContractMethod<
    [timestamp: BigNumberish],
    [bigint],
    "view"
  >;

  carsContract: TypedContractMethod<[], [string], "view">;

  countEquippedSlots: TypedContractMethod<
    [slots: [AddressLike, AddressLike, AddressLike, AddressLike, AddressLike]],
    [bigint],
    "view"
  >;

  gameContract: TypedContractMethod<[], [string], "view">;

  getBatchRewardProjections: TypedContractMethod<
    [users: AddressLike[]],
    [ITorqueDriftStructs.UserRewardProjectionEventStructOutput[]],
    "view"
  >;

  getBatchUserInfo: TypedContractMethod<
    [users: AddressLike[]],
    [ITorqueDriftStructs.UserInfoEventStructOutput[]],
    "view"
  >;

  getClaimPreview: TypedContractMethod<
    [user: AddressLike],
    [ITorqueDriftStructs.ClaimPreviewEventStructOutput],
    "view"
  >;

  getGlobalStats: TypedContractMethod<
    [],
    [ITorqueDriftStructs.GlobalStatsEventStructOutput],
    "view"
  >;

  getLeaderboard: TypedContractMethod<
    [limit: BigNumberish, offset: BigNumberish],
    [ITorqueDriftStructs.LeaderboardEventStructOutput],
    "view"
  >;

  getReferralInfo: TypedContractMethod<
    [user: AddressLike],
    [ITorqueDriftStructs.ReferralInfoEventStructOutput],
    "view"
  >;

  getUserCars: TypedContractMethod<
    [user: AddressLike],
    [ITorqueDriftStructs.UserCarsEventStructOutput],
    "view"
  >;

  getUserInfo: TypedContractMethod<
    [user: AddressLike],
    [ITorqueDriftStructs.UserInfoEventStructOutput],
    "view"
  >;

  getUserInventory: TypedContractMethod<
    [user: AddressLike],
    [ITorqueDriftStructs.UserInventoryEventStructOutput],
    "view"
  >;

  getUserRewardProjection: TypedContractMethod<
    [user: AddressLike],
    [ITorqueDriftStructs.UserRewardProjectionEventStructOutput],
    "view"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "MIN_CLAIM_COOLDOWN"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "SECONDS_PER_DAY"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "SECONDS_PER_HOUR"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "calculateCurrentDay"
  ): TypedContractMethod<[timestamp: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "carsContract"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "countEquippedSlots"
  ): TypedContractMethod<
    [slots: [AddressLike, AddressLike, AddressLike, AddressLike, AddressLike]],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "gameContract"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "getBatchRewardProjections"
  ): TypedContractMethod<
    [users: AddressLike[]],
    [ITorqueDriftStructs.UserRewardProjectionEventStructOutput[]],
    "view"
  >;
  getFunction(
    nameOrSignature: "getBatchUserInfo"
  ): TypedContractMethod<
    [users: AddressLike[]],
    [ITorqueDriftStructs.UserInfoEventStructOutput[]],
    "view"
  >;
  getFunction(
    nameOrSignature: "getClaimPreview"
  ): TypedContractMethod<
    [user: AddressLike],
    [ITorqueDriftStructs.ClaimPreviewEventStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getGlobalStats"
  ): TypedContractMethod<
    [],
    [ITorqueDriftStructs.GlobalStatsEventStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getLeaderboard"
  ): TypedContractMethod<
    [limit: BigNumberish, offset: BigNumberish],
    [ITorqueDriftStructs.LeaderboardEventStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getReferralInfo"
  ): TypedContractMethod<
    [user: AddressLike],
    [ITorqueDriftStructs.ReferralInfoEventStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getUserCars"
  ): TypedContractMethod<
    [user: AddressLike],
    [ITorqueDriftStructs.UserCarsEventStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getUserInfo"
  ): TypedContractMethod<
    [user: AddressLike],
    [ITorqueDriftStructs.UserInfoEventStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getUserInventory"
  ): TypedContractMethod<
    [user: AddressLike],
    [ITorqueDriftStructs.UserInventoryEventStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getUserRewardProjection"
  ): TypedContractMethod<
    [user: AddressLike],
    [ITorqueDriftStructs.UserRewardProjectionEventStructOutput],
    "view"
  >;

  filters: {};
}
