/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "./common";

export declare namespace ITorqueDriftStructs {
  export type CarStateStruct = {
    owner: AddressLike;
    mint: AddressLike;
    rarity: BigNumberish;
    version: BigNumberish;
    hashPower: BigNumberish;
    cooldownSeconds: BigNumberish;
  };

  export type CarStateStructOutput = [
    owner: string,
    mint: string,
    rarity: bigint,
    version: bigint,
    hashPower: bigint,
    cooldownSeconds: bigint
  ] & {
    owner: string;
    mint: string;
    rarity: bigint;
    version: bigint;
    hashPower: bigint;
    cooldownSeconds: bigint;
  };

  export type CarInfoStruct = {
    mint: AddressLike;
    hashPower: BigNumberish;
    efficiency: BigNumberish;
    lastMaintenance: BigNumberish;
    rarity: BigNumberish;
    version: BigNumberish;
    slotIndex: BigNumberish;
  };

  export type CarInfoStructOutput = [
    mint: string,
    hashPower: bigint,
    efficiency: bigint,
    lastMaintenance: bigint,
    rarity: bigint,
    version: bigint,
    slotIndex: bigint
  ] & {
    mint: string;
    hashPower: bigint;
    efficiency: bigint;
    lastMaintenance: bigint;
    rarity: bigint;
    version: bigint;
    slotIndex: bigint;
  };
}

export interface TorqueDriftCarsInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "authorizedContracts"
      | "carStates"
      | "createGameCar"
      | "gameContract"
      | "generateRandomHashPower"
      | "getCarState"
      | "getCooldownSeconds"
      | "getUserCarAddresses"
      | "getUserCarCount"
      | "getUserInventory"
      | "owner"
      | "renounceOwnership"
      | "setAuthorizedContract"
      | "setGameContract"
      | "transferOwnership"
      | "userCars"
      | "userOwnsCar"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic: "CarCreated" | "OwnershipTransferred"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "authorizedContracts",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "carStates",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "createGameCar",
    values: [AddressLike, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "gameContract",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "generateRandomHashPower",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getCarState",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getCooldownSeconds",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getUserCarAddresses",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getUserCarCount",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getUserInventory",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setAuthorizedContract",
    values: [AddressLike, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setGameContract",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "userCars",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "userOwnsCar",
    values: [AddressLike, AddressLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "authorizedContracts",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "carStates", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "createGameCar",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "gameContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "generateRandomHashPower",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCarState",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCooldownSeconds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUserCarAddresses",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUserCarCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUserInventory",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setAuthorizedContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setGameContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "userCars", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "userOwnsCar",
    data: BytesLike
  ): Result;
}

export namespace CarCreatedEvent {
  export type InputTuple = [
    owner: AddressLike,
    carId: BigNumberish,
    rarity: BigNumberish,
    version: BigNumberish,
    hashPower: BigNumberish,
    cooldownSeconds: BigNumberish
  ];
  export type OutputTuple = [
    owner: string,
    carId: bigint,
    rarity: bigint,
    version: bigint,
    hashPower: bigint,
    cooldownSeconds: bigint
  ];
  export interface OutputObject {
    owner: string;
    carId: bigint;
    rarity: bigint;
    version: bigint;
    hashPower: bigint;
    cooldownSeconds: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface TorqueDriftCars extends BaseContract {
  connect(runner?: ContractRunner | null): TorqueDriftCars;
  waitForDeployment(): Promise<this>;

  interface: TorqueDriftCarsInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  authorizedContracts: TypedContractMethod<
    [arg0: AddressLike],
    [boolean],
    "view"
  >;

  carStates: TypedContractMethod<
    [arg0: AddressLike],
    [
      [string, string, bigint, bigint, bigint, bigint] & {
        owner: string;
        mint: string;
        rarity: bigint;
        version: bigint;
        hashPower: bigint;
        cooldownSeconds: bigint;
      }
    ],
    "view"
  >;

  createGameCar: TypedContractMethod<
    [
      owner: AddressLike,
      carId: BigNumberish,
      rarity: BigNumberish,
      version: BigNumberish
    ],
    [string],
    "nonpayable"
  >;

  gameContract: TypedContractMethod<[], [string], "view">;

  generateRandomHashPower: TypedContractMethod<
    [rarity: BigNumberish, version: BigNumberish, seed: BigNumberish],
    [bigint],
    "view"
  >;

  getCarState: TypedContractMethod<
    [carAddress: AddressLike],
    [ITorqueDriftStructs.CarStateStructOutput],
    "view"
  >;

  getCooldownSeconds: TypedContractMethod<
    [rarity: BigNumberish, version: BigNumberish],
    [bigint],
    "view"
  >;

  getUserCarAddresses: TypedContractMethod<
    [user: AddressLike],
    [string[]],
    "view"
  >;

  getUserCarCount: TypedContractMethod<[user: AddressLike], [bigint], "view">;

  getUserInventory: TypedContractMethod<
    [user: AddressLike],
    [
      [
        ITorqueDriftStructs.CarInfoStructOutput[],
        bigint,
        bigint,
        [bigint, bigint, bigint, bigint, bigint]
      ] & {
        ownedCars: ITorqueDriftStructs.CarInfoStructOutput[];
        totalOwned: bigint;
        totalInventoryHashPower: bigint;
        equippedSlots: [bigint, bigint, bigint, bigint, bigint];
      }
    ],
    "view"
  >;

  owner: TypedContractMethod<[], [string], "view">;

  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  setAuthorizedContract: TypedContractMethod<
    [_contract: AddressLike, _authorized: boolean],
    [void],
    "nonpayable"
  >;

  setGameContract: TypedContractMethod<
    [_gameContract: AddressLike],
    [void],
    "nonpayable"
  >;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  userCars: TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [string],
    "view"
  >;

  userOwnsCar: TypedContractMethod<
    [user: AddressLike, carAddress: AddressLike],
    [boolean],
    "view"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "authorizedContracts"
  ): TypedContractMethod<[arg0: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "carStates"
  ): TypedContractMethod<
    [arg0: AddressLike],
    [
      [string, string, bigint, bigint, bigint, bigint] & {
        owner: string;
        mint: string;
        rarity: bigint;
        version: bigint;
        hashPower: bigint;
        cooldownSeconds: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "createGameCar"
  ): TypedContractMethod<
    [
      owner: AddressLike,
      carId: BigNumberish,
      rarity: BigNumberish,
      version: BigNumberish
    ],
    [string],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "gameContract"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "generateRandomHashPower"
  ): TypedContractMethod<
    [rarity: BigNumberish, version: BigNumberish, seed: BigNumberish],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "getCarState"
  ): TypedContractMethod<
    [carAddress: AddressLike],
    [ITorqueDriftStructs.CarStateStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getCooldownSeconds"
  ): TypedContractMethod<
    [rarity: BigNumberish, version: BigNumberish],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "getUserCarAddresses"
  ): TypedContractMethod<[user: AddressLike], [string[]], "view">;
  getFunction(
    nameOrSignature: "getUserCarCount"
  ): TypedContractMethod<[user: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "getUserInventory"
  ): TypedContractMethod<
    [user: AddressLike],
    [
      [
        ITorqueDriftStructs.CarInfoStructOutput[],
        bigint,
        bigint,
        [bigint, bigint, bigint, bigint, bigint]
      ] & {
        ownedCars: ITorqueDriftStructs.CarInfoStructOutput[];
        totalOwned: bigint;
        totalInventoryHashPower: bigint;
        equippedSlots: [bigint, bigint, bigint, bigint, bigint];
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setAuthorizedContract"
  ): TypedContractMethod<
    [_contract: AddressLike, _authorized: boolean],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setGameContract"
  ): TypedContractMethod<[_gameContract: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "userCars"
  ): TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [string],
    "view"
  >;
  getFunction(
    nameOrSignature: "userOwnsCar"
  ): TypedContractMethod<
    [user: AddressLike, carAddress: AddressLike],
    [boolean],
    "view"
  >;

  getEvent(
    key: "CarCreated"
  ): TypedContractEvent<
    CarCreatedEvent.InputTuple,
    CarCreatedEvent.OutputTuple,
    CarCreatedEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;

  filters: {
    "CarCreated(address,uint256,uint8,uint8,uint256,uint32)": TypedContractEvent<
      CarCreatedEvent.InputTuple,
      CarCreatedEvent.OutputTuple,
      CarCreatedEvent.OutputObject
    >;
    CarCreated: TypedContractEvent<
      CarCreatedEvent.InputTuple,
      CarCreatedEvent.OutputTuple,
      CarCreatedEvent.OutputObject
    >;

    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
  };
}
